/*!
* ember-widgets v0.2.0
* Copyright 2013-2015 Addepar Inc.
* See LICENSE.
*/
eval("(function() {\r\n\r\nvar _ref;\r\n\r\nEmber.Widgets = Ember.Namespace.create();\r\n\r\nEmber.Widgets.VERSION = '0.2.0';\r\n\r\nEmber.Widgets.DISABLE_ANIMATIONS = false;\r\n\r\nif ((_ref = Ember.libraries) != null) {\r\n  _ref.register('Ember Widgets', Ember.Widgets.VERSION);\r\n}\r\n\r\n\r\n})();//@ sourceURL=build/src/ember_widgets.js")

eval("(function() {\r\n\r\nEmber.AddeparMixins = Ember.AddeparMixins || Ember.Namespace.create();\r\n\r\nEmber.AddeparMixins.ResizeHandlerMixin = Ember.Mixin.create({\r\n  resizeEndDelay: 200,\r\n  resizing: false,\r\n  onResizeStart: Ember.K,\r\n  onResizeEnd: Ember.K,\r\n  onResize: Ember.K,\r\n  endResize: Ember.computed(function() {\r\n    return function(event) {\r\n      if (this.isDestroyed) {\r\n        return;\r\n      }\r\n      this.set('resizing', false);\r\n      return typeof this.onResizeEnd === \"function\" ? this.onResizeEnd(event) : void 0;\r\n    };\r\n  }),\r\n  handleWindowResize: function(event) {\r\n    if (!this.get('resizing')) {\r\n      this.set('resizing', true);\r\n      if (typeof this.onResizeStart === \"function\") {\r\n        this.onResizeStart(event);\r\n      }\r\n    }\r\n    if (typeof this.onResize === \"function\") {\r\n      this.onResize(event);\r\n    }\r\n    return Ember.run.debounce(this, this.get('endResize'), event, this.get('resizeEndDelay'));\r\n  },\r\n  didInsertElement: function() {\r\n    this._super();\r\n    return this._setupResizeDocumentHandlers();\r\n  },\r\n  willDestroyElement: function() {\r\n    this._removeResizeDocumentHandlers();\r\n    return this._super();\r\n  },\r\n  _setupResizeDocumentHandlers: function() {\r\n    if (this._resizeHandler) {\r\n      return;\r\n    }\r\n    this._resizeHandler = jQuery.proxy(this.get('handleWindowResize'), this);\r\n    return jQuery(window).on(\"resize.\" + this.elementId, this._resizeHandler);\r\n  },\r\n  _removeResizeDocumentHandlers: function() {\r\n    jQuery(window).off(\"resize.\" + this.elementId, this._resizeHandler);\r\n    return this._resizeHandler = null;\r\n  }\r\n});\r\n\r\n\r\n})();//@ sourceURL=dependencies/ember-addepar-mixins/resize_handler.js")

eval("(function() {\r\n\r\nEmber.TEMPLATES[\"accordion-group-layout\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\r\nthis.compilerInfo = [4,'>= 1.0.0'];\r\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\r\n  var buffer = '', stack1;\r\n\r\n\r\n  data.buffer.push(\"<div class=\\\"panel-heading\\\">\\r\\n  <h4 class=\\\"panel-title\\\">\\r\\n    <a class=\\\"accordion-toggle collapsed\\\">\\r\\n      \");\r\n  stack1 = helpers._triageMustache.call(depth0, \"view.title\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\r\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\r\n  data.buffer.push(\"\\r\\n    </a>\\r\\n  </h4>\\r\\n</div>\\r\\n<div class=\\\"panel-collapse collapse\\\">\\r\\n  <div class=\\\"panel-body\\\">\");\r\n  stack1 = helpers._triageMustache.call(depth0, \"yield\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\r\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\r\n  data.buffer.push(\"</div>\\r\\n</div>\\r\\n\");\r\n  return buffer;\r\n  \r\n});\r\n\r\nEmber.TEMPLATES[\"carousel\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\r\nthis.compilerInfo = [4,'>= 1.0.0'];\r\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\r\n  var buffer = '', stack1, escapeExpression=this.escapeExpression;\r\n\r\n\r\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, \"Ember.CollectionView\", {hash:{\r\n    'tagName': (\"ol\"),\r\n    'class': (\"carousel-indicators\"),\r\n    'contentBinding': (\"view.content\"),\r\n    'itemViewClass': (\"Ember.Widgets.CarouselIndicator\")\r\n  },hashTypes:{'tagName': \"STRING\",'class': \"STRING\",'contentBinding': \"STRING\",'itemViewClass': \"STRING\"},hashContexts:{'tagName': depth0,'class': depth0,'contentBinding': depth0,'itemViewClass': depth0},contexts:[depth0],types:[\"ID\"],data:data})));\r\n  data.buffer.push(\"\\r\\n<div class=\\\"carousel-inner\\\">\\r\\n  \");\r\n  stack1 = helpers._triageMustache.call(depth0, \"yield\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\r\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\r\n  data.buffer.push(\"\\r\\n</div>\\r\\n<a class=\\\"left carousel-control\\\"  href=\\\"#\\\" \");\r\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"prev\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\r\n  data.buffer.push(\">‹</a>\\r\\n<a class=\\\"right carousel-control\\\" href=\\\"#\\\" \");\r\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"next\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\r\n  data.buffer.push(\">›</a>\\r\\n\");\r\n  return buffer;\r\n  \r\n});\r\n\r\nEmber.TEMPLATES[\"color-picker-cell\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\r\nthis.compilerInfo = [4,'>= 1.0.0'];\r\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\r\n  \r\n\r\n\r\n  data.buffer.push(\"<div class=\\\"no-color-indicator-holder\\\"></div>\");\r\n  \r\n});\r\n\r\nEmber.TEMPLATES[\"color-picker\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\r\nthis.compilerInfo = [4,'>= 1.0.0'];\r\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\r\n  var buffer = '', stack1, escapeExpression=this.escapeExpression, self=this;\r\n\r\nfunction program1(depth0,data) {\r\n  \r\n  var buffer = '';\r\n  data.buffer.push(\"\\r\\n      \");\r\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, \"Ember.Widgets.ColorPickerCell\", {hash:{\r\n    'colorBinding': (\"selectedColor\"),\r\n    'classNames': (\"color-picker-cell-transparent\")\r\n  },hashTypes:{'colorBinding': \"STRING\",'classNames': \"STRING\"},hashContexts:{'colorBinding': depth0,'classNames': depth0},contexts:[depth0],types:[\"ID\"],data:data})));\r\n  data.buffer.push(\"\\r\\n    \");\r\n  return buffer;\r\n  }\r\n\r\nfunction program3(depth0,data) {\r\n  \r\n  var buffer = '';\r\n  data.buffer.push(\"\\r\\n      \");\r\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, \"Ember.Widgets.ColorPickerCell\", {hash:{\r\n    'colorBinding': (\"selectedColor\")\r\n  },hashTypes:{'colorBinding': \"STRING\"},hashContexts:{'colorBinding': depth0},contexts:[depth0],types:[\"ID\"],data:data})));\r\n  data.buffer.push(\"\\r\\n    \");\r\n  return buffer;\r\n  }\r\n\r\nfunction program5(depth0,data) {\r\n  \r\n  var buffer = '', stack1;\r\n  data.buffer.push(\"\\r\\n      <div class=\\\"color-row clearfix\\\">\\r\\n        \");\r\n  stack1 = helpers.each.call(depth0, \"color\", \"in\", \"row\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(6, program6, data),contexts:[depth0,depth0,depth0],types:[\"ID\",\"ID\",\"ID\"],data:data});\r\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\r\n  data.buffer.push(\"\\r\\n      </div>\\r\\n      <hr>\\r\\n    \");\r\n  return buffer;\r\n  }\r\nfunction program6(depth0,data) {\r\n  \r\n  var buffer = '';\r\n  data.buffer.push(\"\\r\\n          \");\r\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, \"Ember.Widgets.ColorPickerCell\", {hash:{\r\n    'colorBinding': (\"color\")\r\n  },hashTypes:{'colorBinding': \"STRING\"},hashContexts:{'colorBinding': depth0},contexts:[depth0],types:[\"ID\"],data:data})));\r\n  data.buffer.push(\"\\r\\n        \");\r\n  return buffer;\r\n  }\r\n\r\n  data.buffer.push(\"<div class=\\\"dropdown\\\">\\r\\n  <a class=\\\"clearfix color-picker-dropdown-button\\\" data-toggle=\\\"dropdown\\\" href=\\\"#\\\">\\r\\n    \");\r\n  stack1 = helpers['if'].call(depth0, \"isColorTransparent\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),contexts:[depth0],types:[\"ID\"],data:data});\r\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\r\n  data.buffer.push(\"\\r\\n    <span class=\\\"pull-right fa fa-caret-down color-picker-dropdown-caret\\\"></span>\\r\\n  </a>\\r\\n  <div \");\r\n  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{\r\n    'class': (\":dropdown-menu :color-picker-dropdown dropdownClass\")\r\n  },hashTypes:{'class': \"STRING\"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));\r\n  data.buffer.push(\"\\r\\n    role=\\\"menu\\\" aria-labelledby=\\\"dLabel\\\">\\r\\n    \");\r\n  stack1 = helpers.each.call(depth0, \"row\", \"in\", \"colorRows\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(5, program5, data),contexts:[depth0,depth0,depth0],types:[\"ID\",\"ID\",\"ID\"],data:data});\r\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\r\n  data.buffer.push(\"\\r\\n    <form \");\r\n  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{\r\n    'class': (\":color-picker-custom-form isCustomColorValid:valid:invalid\")\r\n  },hashTypes:{'class': \"STRING\"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));\r\n  data.buffer.push(\">\\r\\n      <div class=\\\"form-group form-group-sm\\\">\\r\\n        <div class=\\\"input-group\\\">\\r\\n          <span \");\r\n  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{\r\n    'class': (\":input-group-addon\\r\\n            :color-picker-custom-preview isCustomColor:active\"),\r\n    'style': (\"customColorCSS\")\r\n  },hashTypes:{'class': \"STRING\",'style': \"STRING\"},hashContexts:{'class': depth0,'style': depth0},contexts:[],types:[],data:data})));\r\n  data.buffer.push(\"></span>\\r\\n          \");\r\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, \"Ember.TextField\", {hash:{\r\n    'valueBinding': (\"customColor\"),\r\n    'class': (\"form-control input-sm\"),\r\n    'type': (\"text\"),\r\n    'placeholder': (\"HEX code\")\r\n  },hashTypes:{'valueBinding': \"STRING\",'class': \"STRING\",'type': \"STRING\",'placeholder': \"STRING\"},hashContexts:{'valueBinding': depth0,'class': depth0,'type': depth0,'placeholder': depth0},contexts:[depth0],types:[\"ID\"],data:data})));\r\n  data.buffer.push(\"\\r\\n        </div>\\r\\n      </div>\\r\\n    </form>\\r\\n  </div>\\r\\n</div>\\r\\n\");\r\n  return buffer;\r\n  \r\n});\r\n\r\nEmber.TEMPLATES[\"component-default-content\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\r\nthis.compilerInfo = [4,'>= 1.0.0'];\r\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\r\n  var buffer = '', stack1;\r\n\r\n\r\n  data.buffer.push(\"<p>\");\r\n  stack1 = helpers._triageMustache.call(depth0, \"content\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\r\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\r\n  data.buffer.push(\"</p>\\r\\n\");\r\n  return buffer;\r\n  \r\n});\r\n\r\nEmber.TEMPLATES[\"editable-label\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\r\nthis.compilerInfo = [4,'>= 1.0.0'];\r\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\r\n  var buffer = '', stack1, escapeExpression=this.escapeExpression, self=this;\r\n\r\nfunction program1(depth0,data) {\r\n  \r\n  var buffer = '';\r\n  data.buffer.push(\"\\r\\n  \");\r\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, \"view.innerTextField\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data})));\r\n  data.buffer.push(\"\\r\\n\");\r\n  return buffer;\r\n  }\r\n\r\nfunction program3(depth0,data) {\r\n  \r\n  var buffer = '', stack1;\r\n  data.buffer.push(\"\\r\\n  <span \");\r\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"editLabel\", {hash:{\r\n    'target': (\"view\")\r\n  },hashTypes:{'target': \"STRING\"},hashContexts:{'target': depth0},contexts:[depth0],types:[\"ID\"],data:data})));\r\n  data.buffer.push(\">\");\r\n  stack1 = helpers._triageMustache.call(depth0, \"view.displayName\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\r\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\r\n  data.buffer.push(\"</span>\\r\\n\");\r\n  return buffer;\r\n  }\r\n\r\n  stack1 = helpers['if'].call(depth0, \"view.isEditing\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),contexts:[depth0],types:[\"ID\"],data:data});\r\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\r\n  data.buffer.push(\"\\r\\n\");\r\n  return buffer;\r\n  \r\n});\r\n\r\nEmber.TEMPLATES[\"font-chooser-item\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\r\nthis.compilerInfo = [4,'>= 1.0.0'];\r\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\r\n  var buffer = '', stack1, escapeExpression=this.escapeExpression;\r\n\r\n\r\n  data.buffer.push(\"<div \");\r\n  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{\r\n    'style': (\"view.style\")\r\n  },hashTypes:{'style': \"STRING\"},hashContexts:{'style': depth0},contexts:[],types:[],data:data})));\r\n  data.buffer.push(\">\\r\\n  \");\r\n  stack1 = helpers._triageMustache.call(depth0, \"view.label\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\r\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\r\n  data.buffer.push(\"\\r\\n</div>\\r\\n\");\r\n  return buffer;\r\n  \r\n});\r\n\r\nEmber.TEMPLATES[\"modal-footer\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\r\nthis.compilerInfo = [4,'>= 1.0.0'];\r\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\r\n  var buffer = '', stack1, escapeExpression=this.escapeExpression, self=this;\r\n\r\nfunction program1(depth0,data) {\r\n  \r\n  var buffer = '', stack1;\r\n  data.buffer.push(\"\\r\\n  <button type=\\\"button\\\"\\r\\n    \");\r\n  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{\r\n    'class': (\":btn :btn-primary :btn-confirm isValid::disabled\")\r\n  },hashTypes:{'class': \"STRING\"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));\r\n  data.buffer.push(\"\\r\\n    \");\r\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"sendConfirm\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\r\n  data.buffer.push(\">\");\r\n  stack1 = helpers._triageMustache.call(depth0, \"confirmText\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\r\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\r\n  data.buffer.push(\"\\r\\n  </button>\\r\\n\");\r\n  return buffer;\r\n  }\r\n\r\nfunction program3(depth0,data) {\r\n  \r\n  var buffer = '', stack1;\r\n  data.buffer.push(\"\\r\\n  <button type=\\\"button\\\" class=\\\"btn btn-default btn-cancel\\\"\\r\\n    \");\r\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"sendCancel\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\r\n  data.buffer.push(\">\");\r\n  stack1 = helpers._triageMustache.call(depth0, \"cancelText\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\r\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\r\n  data.buffer.push(\"\\r\\n  </button>\\r\\n\");\r\n  return buffer;\r\n  }\r\n\r\nfunction program5(depth0,data) {\r\n  \r\n  var buffer = '', stack1;\r\n  data.buffer.push(\"\\r\\n  <button type=\\\"button\\\" class=\\\"btn btn-default btn-close\\\"\\r\\n    \");\r\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"sendClose\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\r\n  data.buffer.push(\">\");\r\n  stack1 = helpers._triageMustache.call(depth0, \"closeText\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\r\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\r\n  data.buffer.push(\"\\r\\n  </button>\\r\\n\");\r\n  return buffer;\r\n  }\r\n\r\n  stack1 = helpers['if'].call(depth0, \"confirmText\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:[\"ID\"],data:data});\r\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\r\n  data.buffer.push(\"\\r\\n\\r\\n\");\r\n  stack1 = helpers['if'].call(depth0, \"cancelText\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(3, program3, data),contexts:[depth0],types:[\"ID\"],data:data});\r\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\r\n  data.buffer.push(\"\\r\\n\\r\\n\");\r\n  stack1 = helpers['if'].call(depth0, \"closeText\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(5, program5, data),contexts:[depth0],types:[\"ID\"],data:data});\r\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\r\n  data.buffer.push(\"\\r\\n\");\r\n  return buffer;\r\n  \r\n});\r\n\r\nEmber.TEMPLATES[\"modal\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\r\nthis.compilerInfo = [4,'>= 1.0.0'];\r\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\r\n  var buffer = '', escapeExpression=this.escapeExpression;\r\n\r\n\r\n  data.buffer.push(\"<div \");\r\n  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{\r\n    'class': (\":modal-dialog sizeClass\")\r\n  },hashTypes:{'class': \"STRING\"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));\r\n  data.buffer.push(\">\\r\\n  <div class=\\\"modal-content\\\">\\r\\n    <div class=\\\"modal-header\\\">\\r\\n      \");\r\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, \"_headerViewClass\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data})));\r\n  data.buffer.push(\"\\r\\n    </div>\\r\\n    <div class=\\\"modal-body\\\">\\r\\n      \");\r\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, \"_contentViewClass\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data})));\r\n  data.buffer.push(\"\\r\\n    </div>\\r\\n    <div class=\\\"modal-footer\\\">\\r\\n      \");\r\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, \"_footerViewClass\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data})));\r\n  data.buffer.push(\"\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\");\r\n  return buffer;\r\n  \r\n});\r\n\r\nEmber.TEMPLATES[\"modal_header\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\r\nthis.compilerInfo = [4,'>= 1.0.0'];\r\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\r\n  var buffer = '', stack1, escapeExpression=this.escapeExpression;\r\n\r\n\r\n  data.buffer.push(\"<button type=\\\"button\\\" class=\\\"close\\\" \");\r\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"sendClose\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\r\n  data.buffer.push(\">&times;</button>\\r\\n<h4 class=\\\"modal-title\\\">\");\r\n  stack1 = helpers._triageMustache.call(depth0, \"headerText\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\r\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\r\n  data.buffer.push(\"</h4>\\r\\n\");\r\n  return buffer;\r\n  \r\n});\r\n\r\nEmber.TEMPLATES[\"multi-select-item\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\r\nthis.compilerInfo = [4,'>= 1.0.0'];\r\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\r\n  var buffer = '', stack1, escapeExpression=this.escapeExpression;\r\n\r\n\r\n  data.buffer.push(\"<div>\");\r\n  stack1 = helpers._triageMustache.call(depth0, \"view.label\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\r\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\r\n  data.buffer.push(\"</div>\\r\\n<a class=\\\"ember-select-search-choice-close\\\" href=\\\"#\\\"\\r\\n  \");\r\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"removeSelectItem\", \"view.content\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:[\"STRING\",\"ID\"],data:data})));\r\n  data.buffer.push(\">×\\r\\n</a>\\r\\n\");\r\n  return buffer;\r\n  \r\n});\r\n\r\nEmber.TEMPLATES[\"multi-select\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\r\nthis.compilerInfo = [4,'>= 1.0.0'];\r\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\r\n  var buffer = '', stack1, escapeExpression=this.escapeExpression, self=this;\r\n\r\nfunction program1(depth0,data) {\r\n  \r\n  var buffer = '', stack1;\r\n  data.buffer.push(\"\\r\\n    <span class=\\\"ember-select-no-results\\\">No results match \\\"\");\r\n  stack1 = helpers._triageMustache.call(depth0, \"query\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\r\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\r\n  data.buffer.push(\"\\\"</span>\\r\\n  \");\r\n  return buffer;\r\n  }\r\n\r\n  data.buffer.push(\"<div class=\\\"ember-select-container ember-select-multi dropdown-toggle js-dropdown-toggle\\\">\\r\\n  <ul \");\r\n  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{\r\n    'class': (\":form-control :ember-select-choices choicesFieldClass\")\r\n  },hashTypes:{'class': \"STRING\"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));\r\n  data.buffer.push(\">\\r\\n    \");\r\n  data.buffer.push(escapeExpression(helpers.each.call(depth0, \"selections\", {hash:{\r\n    'itemViewClass': (\"view.selectionItemView\")\r\n  },hashTypes:{'itemViewClass': \"STRING\"},hashContexts:{'itemViewClass': depth0},contexts:[depth0],types:[\"ID\"],data:data})));\r\n  data.buffer.push(\"\\r\\n    <li class=\\\"ember-select-search-field\\\">\\r\\n      \\r\\n      <span class=\\\"invisible-placeholder\\\">\");\r\n  stack1 = helpers._triageMustache.call(depth0, \"invisiblePlaceholderText\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\r\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\r\n  data.buffer.push(\"</span>\\r\\n      \");\r\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, \"searchView\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data})));\r\n  data.buffer.push(\"\\r\\n    </li>\\r\\n  </ul>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"dropdown-menu js-dropdown-menu\\\">\\r\\n  \");\r\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, \"listView\", {hash:{\r\n    'tagName': (\"ul\"),\r\n    'classNames': (\"ember-select-results\"),\r\n    'heightBinding': (\"dropdownHeight\"),\r\n    'rowHeightBinding': (\"rowHeight\"),\r\n    'contentBinding': (\"groupedContent\"),\r\n    'itemViewClassBinding': (\"itemView\")\r\n  },hashTypes:{'tagName': \"STRING\",'classNames': \"STRING\",'heightBinding': \"STRING\",'rowHeightBinding': \"STRING\",'contentBinding': \"STRING\",'itemViewClassBinding': \"STRING\"},hashContexts:{'tagName': depth0,'classNames': depth0,'heightBinding': depth0,'rowHeightBinding': depth0,'contentBinding': depth0,'itemViewClassBinding': depth0},contexts:[depth0],types:[\"ID\"],data:data})));\r\n  data.buffer.push(\"\\r\\n  \");\r\n  stack1 = helpers['if'].call(depth0, \"hasNoResults\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:[\"ID\"],data:data});\r\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\r\n  data.buffer.push(\"\\r\\n</div>\\r\\n\");\r\n  return buffer;\r\n  \r\n});\r\n\r\nEmber.TEMPLATES[\"non-editable-text-pill-configuration\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\r\nthis.compilerInfo = [4,'>= 1.0.0'];\r\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\r\n  var buffer = '', helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\r\n\r\n\r\n  data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{\r\n    'valueBinding': (\"content.text\"),\r\n    'placeholder': (\"Enter custom text\"),\r\n    'class': (\"form-control\")\r\n  },hashTypes:{'valueBinding': \"STRING\",'placeholder': \"STRING\",'class': \"STRING\"},hashContexts:{'valueBinding': depth0,'placeholder': depth0,'class': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\r\n  data.buffer.push(\"\\r\\n\");\r\n  return buffer;\r\n  \r\n});\r\n\r\nEmber.TEMPLATES[\"popover-link-popover\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\r\nthis.compilerInfo = [4,'>= 1.0.0'];\r\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\r\n  var buffer = '', stack1, escapeExpression=this.escapeExpression, self=this;\r\n\r\nfunction program1(depth0,data) {\r\n  \r\n  var buffer = '', stack1;\r\n  data.buffer.push(\"\\r\\n  <h4 class=\\\"popover-title\\\">\");\r\n  stack1 = helpers._triageMustache.call(depth0, \"title\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\r\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\r\n  data.buffer.push(\"</h4>\\r\\n\");\r\n  return buffer;\r\n  }\r\n\r\n  data.buffer.push(\"<div class=\\\"arrow\\\" \");\r\n  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{\r\n    'style': (\"view.arrowStyle\")\r\n  },hashTypes:{'style': \"STRING\"},hashContexts:{'style': depth0},contexts:[],types:[],data:data})));\r\n  data.buffer.push(\"></div>\\r\\n\");\r\n  stack1 = helpers['if'].call(depth0, \"title\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:[\"ID\"],data:data});\r\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\r\n  data.buffer.push(\"\\r\\n<div class=\\\"popover-content\\\">\\r\\n  \");\r\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, \"view._contentViewClass\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data})));\r\n  data.buffer.push(\"\\r\\n</div>\\r\\n\");\r\n  return buffer;\r\n  \r\n});\r\n\r\nEmber.TEMPLATES[\"popover\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\r\nthis.compilerInfo = [4,'>= 1.0.0'];\r\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\r\n  var buffer = '', stack1, escapeExpression=this.escapeExpression, self=this;\r\n\r\nfunction program1(depth0,data) {\r\n  \r\n  var buffer = '', stack1;\r\n  data.buffer.push(\"\\r\\n  <h4 class=\\\"popover-title\\\">\");\r\n  stack1 = helpers._triageMustache.call(depth0, \"title\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\r\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\r\n  data.buffer.push(\"</h4>\\r\\n\");\r\n  return buffer;\r\n  }\r\n\r\n  data.buffer.push(\"<div class=\\\"arrow\\\" \");\r\n  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{\r\n    'style': (\"arrowStyle\")\r\n  },hashTypes:{'style': \"STRING\"},hashContexts:{'style': depth0},contexts:[],types:[],data:data})));\r\n  data.buffer.push(\"></div>\\r\\n\");\r\n  stack1 = helpers['if'].call(depth0, \"title\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:[\"ID\"],data:data});\r\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\r\n  data.buffer.push(\"\\r\\n<div class=\\\"popover-content\\\">\\r\\n  \");\r\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, \"view._contentViewClass\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data})));\r\n  data.buffer.push(\"\\r\\n</div>\\r\\n\");\r\n  return buffer;\r\n  \r\n});\r\n\r\nEmber.TEMPLATES[\"radio-button-layout\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\r\nthis.compilerInfo = [4,'>= 1.0.0'];\r\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\r\n  var buffer = '', stack1, escapeExpression=this.escapeExpression;\r\n\r\n\r\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, \"Ember.Widgets.RadioButtonComponent\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data})));\r\n  data.buffer.push(\"\\r\\n\");\r\n  stack1 = helpers._triageMustache.call(depth0, \"yield\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\r\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\r\n  data.buffer.push(\"\\r\\n\");\r\n  return buffer;\r\n  \r\n});\r\n\r\nEmber.TEMPLATES[\"select-item-layout\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\r\nthis.compilerInfo = [4,'>= 1.0.0'];\r\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\r\n  var buffer = '', stack1, self=this;\r\n\r\nfunction program1(depth0,data) {\r\n  \r\n  var buffer = '', stack1;\r\n  data.buffer.push(\"\\r\\n  \");\r\n  stack1 = helpers._triageMustache.call(depth0, \"view.content.name\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\r\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\r\n  data.buffer.push(\"\\r\\n\");\r\n  return buffer;\r\n  }\r\n\r\nfunction program3(depth0,data) {\r\n  \r\n  var buffer = '', stack1;\r\n  data.buffer.push(\"\\r\\n  \");\r\n  stack1 = helpers._triageMustache.call(depth0, \"yield\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\r\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\r\n  data.buffer.push(\"\\r\\n\");\r\n  return buffer;\r\n  }\r\n\r\n  stack1 = helpers['if'].call(depth0, \"view.content.isGroupOption\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),contexts:[depth0],types:[\"ID\"],data:data});\r\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\r\n  data.buffer.push(\"\\r\\n\");\r\n  return buffer;\r\n  \r\n});\r\n\r\nEmber.TEMPLATES[\"select-item\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\r\nthis.compilerInfo = [4,'>= 1.0.0'];\r\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\r\n  var buffer = '', stack1, escapeExpression=this.escapeExpression, self=this;\r\n\r\nfunction program1(depth0,data) {\r\n  \r\n  var buffer = '', stack1;\r\n  data.buffer.push(\"\\r\\n  <span \");\r\n  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{\r\n    'title': (\"view.label\")\r\n  },hashTypes:{'title': \"ID\"},hashContexts:{'title': depth0},contexts:[],types:[],data:data})));\r\n  data.buffer.push(\">\\r\\n    \");\r\n  stack1 = helpers._triageMustache.call(depth0, \"view.label\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\r\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\r\n  data.buffer.push(\"\\r\\n  </span>\\r\\n\");\r\n  return buffer;\r\n  }\r\n\r\nfunction program3(depth0,data) {\r\n  \r\n  var buffer = '', stack1;\r\n  data.buffer.push(\"\\r\\n  \");\r\n  stack1 = helpers._triageMustache.call(depth0, \"view.label\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\r\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\r\n  data.buffer.push(\"\\r\\n\");\r\n  return buffer;\r\n  }\r\n\r\n  stack1 = helpers['if'].call(depth0, \"controller.titleOnOptions\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),contexts:[depth0],types:[\"ID\"],data:data});\r\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\r\n  data.buffer.push(\"\\r\\n\");\r\n  return buffer;\r\n  \r\n});\r\n\r\nEmber.TEMPLATES[\"select\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\r\nthis.compilerInfo = [4,'>= 1.0.0'];\r\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\r\n  var buffer = '', stack1, escapeExpression=this.escapeExpression, self=this;\r\n\r\nfunction program1(depth0,data) {\r\n  \r\n  var buffer = '';\r\n  data.buffer.push(\"\\r\\n      \");\r\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, \"selectedItemView\", {hash:{\r\n    'contentBinding': (\"selection\")\r\n  },hashTypes:{'contentBinding': \"STRING\"},hashContexts:{'contentBinding': depth0},contexts:[depth0],types:[\"ID\"],data:data})));\r\n  data.buffer.push(\"\\r\\n      <i \");\r\n  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{\r\n    'class': (\"view.dropdownToggleIcon\")\r\n  },hashTypes:{'class': \"STRING\"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));\r\n  data.buffer.push(\"></i>\\r\\n    \");\r\n  return buffer;\r\n  }\r\n\r\nfunction program3(depth0,data) {\r\n  \r\n  var buffer = '', stack1;\r\n  data.buffer.push(\"\\r\\n      <span>\");\r\n  stack1 = helpers._triageMustache.call(depth0, \"prompt\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\r\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\r\n  data.buffer.push(\"</span>\\r\\n      <i \");\r\n  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{\r\n    'class': (\"view.dropdownToggleIcon\")\r\n  },hashTypes:{'class': \"STRING\"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));\r\n  data.buffer.push(\"></i>\\r\\n    \");\r\n  return buffer;\r\n  }\r\n\r\nfunction program5(depth0,data) {\r\n  \r\n  var buffer = '';\r\n  data.buffer.push(\"\\r\\n    <div class=\\\"ember-select-search\\\">\\r\\n      \");\r\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, \"searchView\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data})));\r\n  data.buffer.push(\"\\r\\n    </div>\\r\\n  \");\r\n  return buffer;\r\n  }\r\n\r\nfunction program7(depth0,data) {\r\n  \r\n  var buffer = '', stack1;\r\n  data.buffer.push(\"\\r\\n    \");\r\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, \"listView\", {hash:{\r\n    'tagName': (\"ul\"),\r\n    'classNames': (\"ember-select-results\"),\r\n    'heightBinding': (\"dropdownHeight\"),\r\n    'rowHeightBinding': (\"rowHeight\"),\r\n    'contentBinding': (\"groupedContent\"),\r\n    'itemViewClassBinding': (\"itemView\")\r\n  },hashTypes:{'tagName': \"STRING\",'classNames': \"STRING\",'heightBinding': \"STRING\",'rowHeightBinding': \"STRING\",'contentBinding': \"STRING\",'itemViewClassBinding': \"STRING\"},hashContexts:{'tagName': depth0,'classNames': depth0,'heightBinding': depth0,'rowHeightBinding': depth0,'contentBinding': depth0,'itemViewClassBinding': depth0},contexts:[depth0],types:[\"ID\"],data:data})));\r\n  data.buffer.push(\"\\r\\n    \");\r\n  stack1 = helpers['if'].call(depth0, \"hasNoResults\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(8, program8, data),contexts:[depth0],types:[\"ID\"],data:data});\r\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\r\n  data.buffer.push(\"\\r\\n  \");\r\n  return buffer;\r\n  }\r\nfunction program8(depth0,data) {\r\n  \r\n  var buffer = '', stack1;\r\n  data.buffer.push(\"\\r\\n      <span class=\\\"ember-select-no-results\\\">No results match \\\"\");\r\n  stack1 = helpers._triageMustache.call(depth0, \"query\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\r\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\r\n  data.buffer.push(\"\\\"</span>\\r\\n    \");\r\n  return buffer;\r\n  }\r\n\r\nfunction program10(depth0,data) {\r\n  \r\n  var buffer = '';\r\n  data.buffer.push(\"\\r\\n    \");\r\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, \"selectMenuView\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data})));\r\n  data.buffer.push(\"\\r\\n  \");\r\n  return buffer;\r\n  }\r\n\r\n  data.buffer.push(\"<div class=\\\"ember-select-container dropdown-toggle js-dropdown-toggle\\\" \");\r\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"toggleDropdown\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\r\n  data.buffer.push(\">\\r\\n  <a \");\r\n  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{\r\n    'class': (\":form-control :ember-select-choice buttonClass disabled:disabled\")\r\n  },hashTypes:{'class': \"STRING\"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));\r\n  data.buffer.push(\">\\r\\n    \");\r\n  stack1 = helpers['if'].call(depth0, \"selection\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),contexts:[depth0],types:[\"ID\"],data:data});\r\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\r\n  data.buffer.push(\"\\r\\n  </a>\\r\\n</div>\\r\\n\\r\\n<div \");\r\n  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{\r\n    'class': (\":dropdown-menu :js-dropdown-menu dropdownMenuClass\\r\\n  isDropdownMenuPulledRight:pull-right\")\r\n  },hashTypes:{'class': \"STRING\"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));\r\n  data.buffer.push(\">\\r\\n  \");\r\n  stack1 = helpers.unless.call(depth0, \"isSelect\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(5, program5, data),contexts:[depth0],types:[\"ID\"],data:data});\r\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\r\n  data.buffer.push(\"\\r\\n  \");\r\n  stack1 = helpers['if'].call(depth0, \"showDropdown\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(7, program7, data),contexts:[depth0],types:[\"ID\"],data:data});\r\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\r\n  data.buffer.push(\"\\r\\n  \");\r\n  stack1 = helpers['if'].call(depth0, \"selectMenuView\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(10, program10, data),contexts:[depth0],types:[\"ID\"],data:data});\r\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\r\n  data.buffer.push(\"\\r\\n</div>\\r\\n\");\r\n  return buffer;\r\n  \r\n});\r\n\r\nEmber.TEMPLATES[\"text-editor-config\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\r\nthis.compilerInfo = [4,'>= 1.0.0'];\r\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\r\n  var buffer = '', helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\r\n\r\n\r\n  data.buffer.push(escapeExpression((helper = helpers['select-component'] || (depth0 && depth0['select-component']),options={hash:{\r\n    'content': (\"fontNames\"),\r\n    'placeholder': (\"Select a Font\"),\r\n    'selection': (\"textEditor.selectedFontName\"),\r\n    'class': (\"ember-text-editor-font-family-select js-ember-text-editor-font-family-select\"),\r\n    'isSelect': (\"true\"),\r\n    'buttonClass': (\"btn btn-default btn-sm btn-form text-left\"),\r\n    'itemViewClass': (\"fontChooserItemViewClass\"),\r\n    'userSelected': (\"applyFontName\")\r\n  },hashTypes:{'content': \"ID\",'placeholder': \"STRING\",'selection': \"ID\",'class': \"STRING\",'isSelect': \"STRING\",'buttonClass': \"STRING\",'itemViewClass': \"ID\",'userSelected': \"STRING\"},hashContexts:{'content': depth0,'placeholder': depth0,'selection': depth0,'class': depth0,'isSelect': depth0,'buttonClass': depth0,'itemViewClass': depth0,'userSelected': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"select-component\", options))));\r\n  data.buffer.push(\"\\r\\n\\r\\n\");\r\n  data.buffer.push(escapeExpression((helper = helpers['select-component'] || (depth0 && depth0['select-component']),options={hash:{\r\n    'content': (\"fontSizes\"),\r\n    'placeholder': (\"Select Font Size\"),\r\n    'optionLabelPath': (\"name\"),\r\n    'optionValuePath': (\"size\"),\r\n    'value': (\"textEditor.selectedFontSize\"),\r\n    'sortLabels': (false),\r\n    'class': (\"ember-text-editor-font-size-select\"),\r\n    'isSelect': (\"true\"),\r\n    'buttonClass': (\"btn btn-default btn-sm\"),\r\n    'userSelected': (\"applyFontSize\")\r\n  },hashTypes:{'content': \"ID\",'placeholder': \"STRING\",'optionLabelPath': \"STRING\",'optionValuePath': \"STRING\",'value': \"ID\",'sortLabels': \"BOOLEAN\",'class': \"STRING\",'isSelect': \"STRING\",'buttonClass': \"STRING\",'userSelected': \"STRING\"},hashContexts:{'content': depth0,'placeholder': depth0,'optionLabelPath': depth0,'optionValuePath': depth0,'value': depth0,'sortLabels': depth0,'class': depth0,'isSelect': depth0,'buttonClass': depth0,'userSelected': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"select-component\", options))));\r\n  data.buffer.push(\"\\r\\n\\r\\n\");\r\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, \"Ember.Widgets.ColorPicker\", {hash:{\r\n    'selectedColor': (\"textEditor.selectedForeColor\"),\r\n    'class': (\"btn btn-default btn-sm\"),\r\n    'userSelected': (\"applyForeColor\")\r\n  },hashTypes:{'selectedColor': \"ID\",'class': \"STRING\",'userSelected': \"STRING\"},hashContexts:{'selectedColor': depth0,'class': depth0,'userSelected': depth0},contexts:[depth0],types:[\"ID\"],data:data})));\r\n  data.buffer.push(\"\\r\\n\\r\\n<div class=\\\"btn-group\\\">\\r\\n  <button type=\\\"button\\\"\\r\\n    \");\r\n  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{\r\n    'class': (\":btn :btn-default :btn-sm textEditor.isBold:active :js-btn-bold\")\r\n  },hashTypes:{'class': \"STRING\"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));\r\n  data.buffer.push(\"\\r\\n    \");\r\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"toggleBold\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\r\n  data.buffer.push(\">\\r\\n    <i class=\\\"fa fa-bold\\\"></i>\\r\\n  </button>\\r\\n  <button type=\\\"button\\\"\\r\\n    \");\r\n  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{\r\n    'class': (\":btn :btn-default :btn-sm textEditor.isItalic:active\")\r\n  },hashTypes:{'class': \"STRING\"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));\r\n  data.buffer.push(\"\\r\\n    \");\r\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"toggleItalic\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\r\n  data.buffer.push(\">\\r\\n    <i class=\\\"fa fa-italic\\\"></i>\\r\\n  </button>\\r\\n  <button type=\\\"button\\\"\\r\\n    \");\r\n  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{\r\n    'class': (\":btn :btn-default :btn-sm textEditor.isUnderline:active\")\r\n  },hashTypes:{'class': \"STRING\"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));\r\n  data.buffer.push(\"\\r\\n    \");\r\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"toggleUnderline\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\r\n  data.buffer.push(\">\\r\\n    <i class=\\\"fa fa-underline\\\"></i>\\r\\n  </button>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"btn-group\\\">\\r\\n  <button type=\\\"button\\\"\\r\\n    \");\r\n  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{\r\n    'class': (\":btn :btn-default :btn-sm textEditor.isJustifyLeft:active\")\r\n  },hashTypes:{'class': \"STRING\"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));\r\n  data.buffer.push(\"\\r\\n    \");\r\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"justifyLeft\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\r\n  data.buffer.push(\">\\r\\n    <i class=\\\"fa fa-align-left\\\"></i>\\r\\n  </button>\\r\\n  <button type=\\\"button\\\"\\r\\n    \");\r\n  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{\r\n    'class': (\":btn :btn-default :btn-sm textEditor.isJustifyCenter:active\")\r\n  },hashTypes:{'class': \"STRING\"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));\r\n  data.buffer.push(\"\\r\\n    \");\r\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"justifyCenter\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\r\n  data.buffer.push(\">\\r\\n    <i class=\\\"fa fa-align-center\\\"></i>\\r\\n  </button>\\r\\n  <button type=\\\"button\\\"\\r\\n    \");\r\n  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{\r\n    'class': (\":btn :btn-default :btn-sm textEditor.isJustifyRight:active\")\r\n  },hashTypes:{'class': \"STRING\"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));\r\n  data.buffer.push(\"\\r\\n    \");\r\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"justifyRight\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\r\n  data.buffer.push(\">\\r\\n    <i class=\\\"fa fa-align-right\\\"></i>\\r\\n  </button>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"btn-group\\\">\\r\\n  <button type=\\\"button\\\" class=\\\"btn btn-default btn-sm\\\"\\r\\n    \");\r\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"insertOrderedList\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\r\n  data.buffer.push(\">\\r\\n    <i class=\\\"fa fa-list-ol\\\"></i>\\r\\n  </button>\\r\\n  <button type=\\\"button\\\" class=\\\"btn btn-default btn-sm\\\"\\r\\n    \");\r\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"insertUnorderedList\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\r\n  data.buffer.push(\">\\r\\n    <i class=\\\"fa fa-list-ul\\\"></i>\\r\\n  </button>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"btn-group\\\">\\r\\n  <button type=\\\"button\\\" class=\\\"btn btn-default btn-sm\\\"\\r\\n    \");\r\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"outdent\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\r\n  data.buffer.push(\">\\r\\n    <i class=\\\"fa fa-outdent\\\"></i>\\r\\n  </button>\\r\\n  <button type=\\\"button\\\" class=\\\"btn btn-default btn-sm\\\"\\r\\n    \");\r\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"indent\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\r\n  data.buffer.push(\">\\r\\n    <i class=\\\"fa fa-indent\\\"></i>\\r\\n  </button>\\r\\n</div>\\r\\n\");\r\n  return buffer;\r\n  \r\n});\r\n\r\nEmber.TEMPLATES[\"text-editor-pill-menu\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\r\nthis.compilerInfo = [4,'>= 1.0.0'];\r\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\r\n  var buffer = '', stack1, escapeExpression=this.escapeExpression, self=this;\r\n\r\nfunction program1(depth0,data) {\r\n  \r\n  var buffer = '', stack1;\r\n  data.buffer.push(\"\\r\\n<div class=\\\"ember-select-container dropdown-toggle\\\" \");\r\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"toggleDropdown\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\r\n  data.buffer.push(\">\\r\\n  <a \");\r\n  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{\r\n    'class': (\":ember-select-choice buttonClass\")\r\n  },hashTypes:{'class': \"STRING\"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));\r\n  data.buffer.push(\">\\r\\n    \");\r\n  stack1 = helpers['if'].call(depth0, \"selection\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(4, program4, data),fn:self.program(2, program2, data),contexts:[depth0],types:[\"ID\"],data:data});\r\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\r\n  data.buffer.push(\"\\r\\n  </a>\\r\\n</div>\\r\\n\");\r\n  return buffer;\r\n  }\r\nfunction program2(depth0,data) {\r\n  \r\n  var buffer = '';\r\n  data.buffer.push(\"\\r\\n      \");\r\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, \"selectedItemView\", {hash:{\r\n    'contentBinding': (\"selection\")\r\n  },hashTypes:{'contentBinding': \"STRING\"},hashContexts:{'contentBinding': depth0},contexts:[depth0],types:[\"ID\"],data:data})));\r\n  data.buffer.push(\"\\r\\n      <i \");\r\n  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{\r\n    'class': (\"view.dropdownToggleIcon\")\r\n  },hashTypes:{'class': \"STRING\"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));\r\n  data.buffer.push(\"></i>\\r\\n    \");\r\n  return buffer;\r\n  }\r\n\r\nfunction program4(depth0,data) {\r\n  \r\n  var buffer = '', stack1;\r\n  data.buffer.push(\"\\r\\n      <span>\");\r\n  stack1 = helpers._triageMustache.call(depth0, \"prompt\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\r\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\r\n  data.buffer.push(\"</span>\\r\\n      <i \");\r\n  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{\r\n    'class': (\"view.dropdownToggleIcon\")\r\n  },hashTypes:{'class': \"STRING\"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));\r\n  data.buffer.push(\"></i>\\r\\n    \");\r\n  return buffer;\r\n  }\r\n\r\nfunction program6(depth0,data) {\r\n  \r\n  var buffer = '';\r\n  data.buffer.push(\"\\r\\n    <div class=\\\"ember-select-search\\\">\\r\\n      \");\r\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, \"searchView\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data})));\r\n  data.buffer.push(\"\\r\\n    </div>\\r\\n  \");\r\n  return buffer;\r\n  }\r\n\r\nfunction program8(depth0,data) {\r\n  \r\n  var buffer = '', stack1;\r\n  data.buffer.push(\"\\r\\n    <span class=\\\"ember-select-no-results\\\">No results match \\\"\");\r\n  stack1 = helpers._triageMustache.call(depth0, \"query\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\r\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\r\n  data.buffer.push(\"\\\"</span>\\r\\n  \");\r\n  return buffer;\r\n  }\r\n\r\nfunction program10(depth0,data) {\r\n  \r\n  var buffer = '';\r\n  data.buffer.push(\"\\r\\n    \");\r\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, \"selectMenuView\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data})));\r\n  data.buffer.push(\"\\r\\n  \");\r\n  return buffer;\r\n  }\r\n\r\n  stack1 = helpers['if'].call(depth0, \"showButton\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:[\"ID\"],data:data});\r\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\r\n  data.buffer.push(\"\\r\\n\\r\\n<div \");\r\n  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{\r\n    'class': (\":dropdown-menu dropdownMenuClass\")\r\n  },hashTypes:{'class': \"STRING\"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));\r\n  data.buffer.push(\">\\r\\n  \");\r\n  stack1 = helpers.unless.call(depth0, \"isSelect\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(6, program6, data),contexts:[depth0],types:[\"ID\"],data:data});\r\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\r\n  data.buffer.push(\"\\r\\n  \");\r\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, \"listView\", {hash:{\r\n    'tagName': (\"ul\"),\r\n    'classNames': (\"ember-select-results\"),\r\n    'heightBinding': (\"dropdownHeight\"),\r\n    'rowHeightBinding': (\"rowHeight\"),\r\n    'contentBinding': (\"groupedContent\"),\r\n    'itemViewClassBinding': (\"itemView\")\r\n  },hashTypes:{'tagName': \"STRING\",'classNames': \"STRING\",'heightBinding': \"STRING\",'rowHeightBinding': \"STRING\",'contentBinding': \"STRING\",'itemViewClassBinding': \"STRING\"},hashContexts:{'tagName': depth0,'classNames': depth0,'heightBinding': depth0,'rowHeightBinding': depth0,'contentBinding': depth0,'itemViewClassBinding': depth0},contexts:[depth0],types:[\"ID\"],data:data})));\r\n  data.buffer.push(\"\\r\\n  \");\r\n  stack1 = helpers['if'].call(depth0, \"hasNoResults\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(8, program8, data),contexts:[depth0],types:[\"ID\"],data:data});\r\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\r\n  data.buffer.push(\"\\r\\n  \");\r\n  stack1 = helpers['if'].call(depth0, \"selectMenuView\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(10, program10, data),contexts:[depth0],types:[\"ID\"],data:data});\r\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\r\n  data.buffer.push(\"\\r\\n</div>\\r\\n\");\r\n  return buffer;\r\n  \r\n});\r\n\r\nEmber.TEMPLATES[\"text-editor-with-non-editable-config\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\r\nthis.compilerInfo = [4,'>= 1.0.0'];\r\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\r\n  var buffer = '', helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\r\n\r\n\r\n  data.buffer.push(escapeExpression((helper = helpers['select-component'] || (depth0 && depth0['select-component']),options={hash:{\r\n    'content': (\"fontNames\"),\r\n    'placeholder': (\"Select a Font\"),\r\n    'selection': (\"textEditor.selectedFontName\"),\r\n    'class': (\"ember-text-editor-font-family-select js-ember-text-editor-font-family-select\"),\r\n    'isSelect': (\"true\"),\r\n    'buttonClass': (\"btn btn-default btn-sm btn-form text-left\"),\r\n    'itemViewClass': (\"fontChooserItemViewClass\"),\r\n    'userSelected': (\"applyFontName\")\r\n  },hashTypes:{'content': \"ID\",'placeholder': \"STRING\",'selection': \"ID\",'class': \"STRING\",'isSelect': \"STRING\",'buttonClass': \"STRING\",'itemViewClass': \"ID\",'userSelected': \"STRING\"},hashContexts:{'content': depth0,'placeholder': depth0,'selection': depth0,'class': depth0,'isSelect': depth0,'buttonClass': depth0,'itemViewClass': depth0,'userSelected': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"select-component\", options))));\r\n  data.buffer.push(\"\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\");\r\n  data.buffer.push(escapeExpression((helper = helpers['select-component'] || (depth0 && depth0['select-component']),options={hash:{\r\n    'content': (\"fontSizes\"),\r\n    'placeholder': (\"Select Font Size\"),\r\n    'optionLabelPath': (\"name\"),\r\n    'optionValuePath': (\"size\"),\r\n    'value': (\"textEditor.selectedFontSize\"),\r\n    'sortLabels': (false),\r\n    'class': (\"ember-text-editor-font-size-select\"),\r\n    'isSelect': (\"true\"),\r\n    'buttonClass': (\"btn btn-default btn-sm\"),\r\n    'userSelected': (\"applyFontSize\")\r\n  },hashTypes:{'content': \"ID\",'placeholder': \"STRING\",'optionLabelPath': \"STRING\",'optionValuePath': \"STRING\",'value': \"ID\",'sortLabels': \"BOOLEAN\",'class': \"STRING\",'isSelect': \"STRING\",'buttonClass': \"STRING\",'userSelected': \"STRING\"},hashContexts:{'content': depth0,'placeholder': depth0,'optionLabelPath': depth0,'optionValuePath': depth0,'value': depth0,'sortLabels': depth0,'class': depth0,'isSelect': depth0,'buttonClass': depth0,'userSelected': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"select-component\", options))));\r\n  data.buffer.push(\"\\r\\n\\r\\n\");\r\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, \"Ember.Widgets.ColorPicker\", {hash:{\r\n    'selectedColor': (\"textEditor.selectedForeColor\"),\r\n    'class': (\"btn btn-default btn-sm\"),\r\n    'userSelected': (\"applyForeColor\")\r\n  },hashTypes:{'selectedColor': \"ID\",'class': \"STRING\",'userSelected': \"STRING\"},hashContexts:{'selectedColor': depth0,'class': depth0,'userSelected': depth0},contexts:[depth0],types:[\"ID\"],data:data})));\r\n  data.buffer.push(\"\\r\\n\\r\\n<div class=\\\"btn-group\\\">\\r\\n  <button type=\\\"button\\\"\\r\\n    \");\r\n  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{\r\n    'class': (\":btn :btn-default :btn-sm textEditor.isBold:active :js-btn-bold\")\r\n  },hashTypes:{'class': \"STRING\"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));\r\n  data.buffer.push(\"\\r\\n    \");\r\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"toggleBold\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\r\n  data.buffer.push(\">\\r\\n    <i class=\\\"fa fa-bold\\\"></i>\\r\\n  </button>\\r\\n  <button type=\\\"button\\\"\\r\\n    \");\r\n  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{\r\n    'class': (\":btn :btn-default :btn-sm textEditor.isItalic:active\")\r\n  },hashTypes:{'class': \"STRING\"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));\r\n  data.buffer.push(\"\\r\\n    \");\r\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"toggleItalic\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\r\n  data.buffer.push(\">\\r\\n    <i class=\\\"fa fa-italic\\\"></i>\\r\\n  </button>\\r\\n  <button type=\\\"button\\\"\\r\\n    \");\r\n  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{\r\n    'class': (\":btn :btn-default :btn-sm textEditor.isUnderline:active\")\r\n  },hashTypes:{'class': \"STRING\"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));\r\n  data.buffer.push(\"\\r\\n    \");\r\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"toggleUnderline\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\r\n  data.buffer.push(\">\\r\\n    <i class=\\\"fa fa-underline\\\"></i>\\r\\n  </button>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"btn-group\\\">\\r\\n  <button type=\\\"button\\\"\\r\\n    \");\r\n  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{\r\n    'class': (\":btn :btn-default :btn-sm textEditor.isJustifyLeft:active\")\r\n  },hashTypes:{'class': \"STRING\"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));\r\n  data.buffer.push(\"\\r\\n    \");\r\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"justifyLeft\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\r\n  data.buffer.push(\">\\r\\n    <i class=\\\"fa fa-align-left\\\"></i>\\r\\n  </button>\\r\\n  <button type=\\\"button\\\"\\r\\n    \");\r\n  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{\r\n    'class': (\":btn :btn-default :btn-sm textEditor.isJustifyCenter:active\")\r\n  },hashTypes:{'class': \"STRING\"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));\r\n  data.buffer.push(\"\\r\\n    \");\r\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"justifyCenter\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\r\n  data.buffer.push(\">\\r\\n    <i class=\\\"fa fa-align-center\\\"></i>\\r\\n  </button>\\r\\n  <button type=\\\"button\\\"\\r\\n    \");\r\n  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{\r\n    'class': (\":btn :btn-default :btn-sm textEditor.isJustifyRight:active\")\r\n  },hashTypes:{'class': \"STRING\"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));\r\n  data.buffer.push(\"\\r\\n    \");\r\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"justifyRight\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\r\n  data.buffer.push(\">\\r\\n    <i class=\\\"fa fa-align-right\\\"></i>\\r\\n  </button>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"btn-group\\\">\\r\\n  <button type=\\\"button\\\" class=\\\"btn btn-default btn-sm\\\"\\r\\n    \");\r\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"insertOrderedList\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\r\n  data.buffer.push(\">\\r\\n    <i class=\\\"fa fa-list-ol\\\"></i>\\r\\n  </button>\\r\\n  <button type=\\\"button\\\" class=\\\"btn btn-default btn-sm\\\"\\r\\n    \");\r\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"insertUnorderedList\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\r\n  data.buffer.push(\">\\r\\n    <i class=\\\"fa fa-list-ul\\\"></i>\\r\\n  </button>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"btn-group\\\">\\r\\n  <button type=\\\"button\\\" class=\\\"btn btn-default btn-sm\\\"\\r\\n    \");\r\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"outdent\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\r\n  data.buffer.push(\">\\r\\n    <i class=\\\"fa fa-outdent\\\"></i>\\r\\n  </button>\\r\\n  <button type=\\\"button\\\" class=\\\"btn btn-default btn-sm\\\"\\r\\n    \");\r\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"indent\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\r\n  data.buffer.push(\">\\r\\n    <i class=\\\"fa fa-indent\\\"></i>\\r\\n  </button>\\r\\n</div>\\r\\n\\r\\n\");\r\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, \"Ember.Widgets.PillSelect\", {hash:{\r\n    'class': (\"insert-non-editable-btn\"),\r\n    'isSelect': (\"pillHideSearchBox\"),\r\n    'query': (\"query\"),\r\n    'showDropdown': (\"showConfigPopover\"),\r\n    'content': (\"_pillOptions\"),\r\n    'optionLabelPath': (\"label\"),\r\n    'optionValuePath': (\"value\"),\r\n    'prompt': (\"Insert Non-Editable\"),\r\n    'selection': (\"selectedPillOption\"),\r\n    'buttonClass': (\"btn btn-default btn-sm\"),\r\n    'viewName': (\"pillChooser\"),\r\n    'userSelected': (\"insertPill\")\r\n  },hashTypes:{'class': \"STRING\",'isSelect': \"ID\",'query': \"ID\",'showDropdown': \"ID\",'content': \"ID\",'optionLabelPath': \"STRING\",'optionValuePath': \"STRING\",'prompt': \"STRING\",'selection': \"ID\",'buttonClass': \"STRING\",'viewName': \"STRING\",'userSelected': \"STRING\"},hashContexts:{'class': depth0,'isSelect': depth0,'query': depth0,'showDropdown': depth0,'content': depth0,'optionLabelPath': depth0,'optionValuePath': depth0,'prompt': depth0,'selection': depth0,'buttonClass': depth0,'viewName': depth0,'userSelected': depth0},contexts:[depth0],types:[\"ID\"],data:data})));\r\n  data.buffer.push(\"\\r\\n\");\r\n  return buffer;\r\n  \r\n});\r\n\r\nEmber.TEMPLATES[\"text-editor-with-non-editable\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\r\nthis.compilerInfo = [4,'>= 1.0.0'];\r\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\r\n  var buffer = '', escapeExpression=this.escapeExpression;\r\n\r\n\r\n  data.buffer.push(\"<iframe class=\\\"text-editor-frame\\\" src=\\\"about:blank\\\">\\r\\n</iframe>\\r\\n\\r\\n\");\r\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, \"Ember.Widgets.PillSelect\", {hash:{\r\n    'class': (\"insert-non-editable-btn\"),\r\n    'isSelect': (\"pillHideSearchBox\"),\r\n    'query': (\"query\"),\r\n    'showDropdown': (\"showConfigPopover\"),\r\n    'content': (\"_pillOptions\"),\r\n    'optionLabelPath': (\"label\"),\r\n    'optionValuePath': (\"value\"),\r\n    'prompt': (\"Insert Non-Editable\"),\r\n    'selection': (\"selectedPillOption\"),\r\n    'buttonClass': (\"btn btn-default btn-sm\"),\r\n    'viewName': (\"pillChooserInLine\"),\r\n    'userSelected': (\"insertPill\"),\r\n    'showButton': (false)\r\n  },hashTypes:{'class': \"STRING\",'isSelect': \"ID\",'query': \"ID\",'showDropdown': \"ID\",'content': \"ID\",'optionLabelPath': \"STRING\",'optionValuePath': \"STRING\",'prompt': \"STRING\",'selection': \"ID\",'buttonClass': \"STRING\",'viewName': \"STRING\",'userSelected': \"STRING\",'showButton': \"BOOLEAN\"},hashContexts:{'class': depth0,'isSelect': depth0,'query': depth0,'showDropdown': depth0,'content': depth0,'optionLabelPath': depth0,'optionValuePath': depth0,'prompt': depth0,'selection': depth0,'buttonClass': depth0,'viewName': depth0,'userSelected': depth0,'showButton': depth0},contexts:[depth0],types:[\"ID\"],data:data})));\r\n  data.buffer.push(\"\\r\\n\");\r\n  return buffer;\r\n  \r\n});\r\n\r\nEmber.TEMPLATES[\"text-editor\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\r\nthis.compilerInfo = [4,'>= 1.0.0'];\r\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\r\n  \r\n\r\n\r\n  data.buffer.push(\"<iframe class=\\\"text-editor-frame\\\" src=\\\"about:blank\\\">\\r\\n</iframe>\\r\\n\");\r\n  \r\n});\r\n\r\nEmber.TEMPLATES[\"typeahead\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\r\nthis.compilerInfo = [4,'>= 1.0.0'];\r\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\r\n  var buffer = '', stack1, escapeExpression=this.escapeExpression, self=this;\r\n\r\nfunction program1(depth0,data) {\r\n  \r\n  var buffer = '';\r\n  data.buffer.push(\"\\r\\n  <div class=\\\"dropdown-menu\\\">\\r\\n    \");\r\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, \"listView\", {hash:{\r\n    'tagName': (\"ul\"),\r\n    'classNames': (\"ember-typeahead-results\"),\r\n    'heightBinding': (\"dropdownHeight\"),\r\n    'rowHeightBinding': (\"rowHeight\"),\r\n    'contentBinding': (\"groupedContent\"),\r\n    'itemViewClassBinding': (\"itemView\")\r\n  },hashTypes:{'tagName': \"STRING\",'classNames': \"STRING\",'heightBinding': \"STRING\",'rowHeightBinding': \"STRING\",'contentBinding': \"STRING\",'itemViewClassBinding': \"STRING\"},hashContexts:{'tagName': depth0,'classNames': depth0,'heightBinding': depth0,'rowHeightBinding': depth0,'contentBinding': depth0,'itemViewClassBinding': depth0},contexts:[depth0],types:[\"ID\"],data:data})));\r\n  data.buffer.push(\"\\r\\n  </div>\\r\\n\");\r\n  return buffer;\r\n  }\r\n\r\n  data.buffer.push(\"<div>\\r\\n  \");\r\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, \"searchView\", {hash:{\r\n    'classBinding': (\"searchFieldClass\")\r\n  },hashTypes:{'classBinding': \"STRING\"},hashContexts:{'classBinding': depth0},contexts:[depth0],types:[\"ID\"],data:data})));\r\n  data.buffer.push(\"\\r\\n</div>\\r\\n\");\r\n  stack1 = helpers.unless.call(depth0, \"hasNoResults\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:[\"ID\"],data:data});\r\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\r\n  data.buffer.push(\"\\r\\n\");\r\n  return buffer;\r\n  \r\n});\r\n\r\nEmber.TEMPLATES[\"view-parent-view-content\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\r\nthis.compilerInfo = [4,'>= 1.0.0'];\r\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\r\n  var buffer = '', stack1;\r\n\r\n\r\n  stack1 = helpers._triageMustache.call(depth0, \"view.parentView.content\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\r\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\r\n  data.buffer.push(\"\\r\\n\");\r\n  return buffer;\r\n  \r\n});\r\n\r\n})();//@ sourceURL=build/src/templates.js")

eval("(function() {\r\n\r\nEmber.Widgets.StyleBindingsMixin = Ember.Mixin.create({\r\n  concatenatedProperties: ['styleBindings'],\r\n  attributeBindings: ['style'],\r\n  unitType: 'px',\r\n  createStyleString: function(styleName, property) {\r\n    var value;\r\n    value = this.get(property);\r\n    if (value === void 0) {\r\n      return;\r\n    }\r\n    if (Ember.typeOf(value) === 'number') {\r\n      value = value + this.get('unitType');\r\n    }\r\n    return \"\" + styleName + \":\" + value + \";\";\r\n  },\r\n  applyStyleBindings: function() {\r\n    var lookup, properties, styleBindings, styleComputed, styles,\r\n      _this = this;\r\n    styleBindings = this.styleBindings;\r\n    if (!styleBindings) {\r\n      return;\r\n    }\r\n    lookup = {};\r\n    styleBindings.forEach(function(binding) {\r\n      var property, style, _ref;\r\n      _ref = binding.split(':'), property = _ref[0], style = _ref[1];\r\n      return lookup[style || property] = property;\r\n    });\r\n    styles = _.keys(lookup);\r\n    properties = _.values(lookup);\r\n    styleComputed = Ember.computed(function() {\r\n      var styleString, styleTokens;\r\n      styleTokens = styles.map(function(style) {\r\n        return _this.createStyleString(style, lookup[style]);\r\n      });\r\n      styleString = styleTokens.join('');\r\n      if (styleString.length !== 0) {\r\n        return styleString;\r\n      }\r\n    });\r\n    styleComputed.property.apply(styleComputed, properties);\r\n    return Ember.defineProperty(this, 'style', styleComputed);\r\n  },\r\n  init: function() {\r\n    this.applyStyleBindings();\r\n    return this._super();\r\n  }\r\n});\r\n\r\nEmber.Widgets.BodyEventListener = Ember.Mixin.create({\r\n  bodyElementSelector: 'html',\r\n  bodyClick: Ember.K,\r\n  didInsertElement: function() {\r\n    this._super();\r\n    return Ember.run.next(this, this._setupDocumentHandlers);\r\n  },\r\n  willDestroyElement: function() {\r\n    this._super();\r\n    return this._removeDocumentHandlers();\r\n  },\r\n  _setupDocumentHandlers: function() {\r\n    var _this = this;\r\n    if (this._clickHandler || this.isDestroying) {\r\n      return;\r\n    }\r\n    this._clickHandler = function(event) {\r\n      return Ember.run(function() {\r\n        if ((_this.get('_state') || _this.get('state')) === 'inDOM' && Ember.isEmpty(_this.$().has($(event.target)))) {\r\n          return _this.bodyClick();\r\n        }\r\n      });\r\n    };\r\n    return $(this.get('bodyElementSelector')).on(\"click\", this._clickHandler);\r\n  },\r\n  _removeDocumentHandlers: function() {\r\n    $(this.get('bodyElementSelector')).off(\"click\", this._clickHandler);\r\n    return this._clickHandler = null;\r\n  }\r\n});\r\n\r\n\r\n})();//@ sourceURL=build/src/mixins.js")

eval("(function() {\r\n\r\nEmber.Widgets.AccordionComponent = Ember.Component.extend({\r\n  classNames: 'panel-group',\r\n  activeIndex: 0\r\n});\r\n\r\nEmber.Widgets.AccordionItem = Ember.View.extend({\r\n  defaultTemplate: Ember.Handlebars.compile('{{view.content}}'),\r\n  layoutName: 'accordion-group-layout',\r\n  classNames: 'panel panel-default',\r\n  title: 'Untitled Accordion Group',\r\n  index: 0,\r\n  isActive: false,\r\n  content: Ember.computed.alias('parentView.content'),\r\n  isActiveDidChange: Ember.observer(function() {\r\n    this.set('isActive', this.get('parentView.activeIndex') === this.get('index'));\r\n    if (this.get('isActive')) {\r\n      return this.show();\r\n    } else {\r\n      return this.hide();\r\n    }\r\n  }, 'parentView.activeIndex'),\r\n  didInsertElement: function() {\r\n    var index;\r\n    index = this.get('parentView').$('.panel').index(this.$());\r\n    this.set('index', index);\r\n    return this.isActiveDidChange();\r\n  },\r\n  click: function(event) {\r\n    if (!(this.$(event.target).closest('.panel-heading').length > 0)) {\r\n      return;\r\n    }\r\n    if (this.get('isActive')) {\r\n      return this.set('parentView.activeIndex', null);\r\n    } else {\r\n      return this.set('parentView.activeIndex', this.get('index'));\r\n    }\r\n  },\r\n  hide: function() {\r\n    var $accordionBody,\r\n      _this = this;\r\n    $accordionBody = this.$('.panel-collapse');\r\n    $accordionBody.height($accordionBody.height())[0].offsetHeight;\r\n    $accordionBody.removeClass('collapse').removeClass('in').addClass('collapsing');\r\n    $accordionBody.height(0);\r\n    return this._onTransitionEnd($accordionBody, function() {\r\n      return $accordionBody.removeClass('collapsing').addClass('collapse');\r\n    });\r\n  },\r\n  show: function() {\r\n    var $accordionBody,\r\n      _this = this;\r\n    $accordionBody = this.$('.panel-collapse');\r\n    $accordionBody.removeClass('collapse').addClass('collapsing').height(0);\r\n    $accordionBody.height($accordionBody[0]['scrollHeight']);\r\n    return this._onTransitionEnd($(), function() {\r\n      return $accordionBody.removeClass('collapsing').addClass('in').height('auto');\r\n    });\r\n  },\r\n  _onTransitionEnd: function($el, callback) {\r\n    if (Ember.Widgets.DISABLE_ANIMATIONS) {\r\n      return callback();\r\n    } else {\r\n      return $el.one($.support.transition.end, callback);\r\n    }\r\n  }\r\n});\r\n\r\nEmber.Handlebars.helper('accordion-component', Ember.Widgets.AccordionComponent);\r\n\r\nEmber.Handlebars.helper('accordion-item', Ember.Widgets.AccordionItem);\r\n\r\n\r\n})();//@ sourceURL=build/src/accordion.js")

eval("(function() {\r\n\r\nEmber.Widgets.CarouselComponent = Ember.Component.extend({\r\n  layoutName: 'carousel',\r\n  classNames: ['carousel', 'slide'],\r\n  classNameBindings: Ember.A(['sliding']),\r\n  activeIndex: 0,\r\n  didInsertElement: function() {\r\n    if (!this.get('content')) {\r\n      return this.set('content', Ember.A(new Array(this.$('.item').length)));\r\n    }\r\n  },\r\n  actions: {\r\n    prev: function() {\r\n      var activeIndex, contentLength, nextIndex;\r\n      if (this.get('sliding')) {\r\n        return;\r\n      }\r\n      activeIndex = this.get('activeIndex');\r\n      contentLength = this.get('content.length');\r\n      nextIndex = activeIndex - 1;\r\n      nextIndex = nextIndex < 0 ? contentLength - 1 : nextIndex;\r\n      return this.slide('prev', nextIndex);\r\n    },\r\n    next: function() {\r\n      var activeIndex, contentLength, nextIndex;\r\n      if (this.get('sliding')) {\r\n        return;\r\n      }\r\n      activeIndex = this.get('activeIndex');\r\n      contentLength = this.get('content.length');\r\n      nextIndex = activeIndex + 1;\r\n      nextIndex = nextIndex >= contentLength ? 0 : nextIndex;\r\n      return this.slide('next', nextIndex);\r\n    }\r\n  },\r\n  to: function(pos) {\r\n    var direction;\r\n    if (this.get('sliding')) {\r\n      return;\r\n    }\r\n    if (!((0 <= pos && pos < this.get('content.length')))) {\r\n      return;\r\n    }\r\n    direction = pos > this.get('activeIndex') ? 'next' : 'prev';\r\n    return this.slide(direction, pos);\r\n  },\r\n  slide: function(type, nextIndex) {\r\n    var $active, $next, direction,\r\n      _this = this;\r\n    if (this.get('activeIndex') === nextIndex) {\r\n      return;\r\n    }\r\n    direction = type === 'next' ? 'left' : 'right';\r\n    $active = $(this.$('.item').get(this.get('activeIndex')));\r\n    $next = $(this.$('.item').get(nextIndex));\r\n    if (!Ember.Widgets.DISABLE_ANIMATIONS) {\r\n      this.set('sliding', true);\r\n      $next.addClass(type);\r\n      $next[0].offsetWidth;\r\n      $active.addClass(direction);\r\n      $next.addClass(direction);\r\n    }\r\n    return this._onTransitionEnd($next, function() {\r\n      return Ember.run(_this, function() {\r\n        this.set('activeIndex', nextIndex);\r\n        $next.removeClass([type, direction].join(' ')).addClass('active');\r\n        $active.removeClass(['active', direction].join(' '));\r\n        return this.set('sliding', false);\r\n      });\r\n    });\r\n  },\r\n  _onTransitionEnd: function($el, callback) {\r\n    if (Ember.Widgets.DISABLE_ANIMATIONS) {\r\n      return callback();\r\n    } else {\r\n      return $el.one($.support.transition.end, callback);\r\n    }\r\n  }\r\n});\r\n\r\nEmber.Widgets.CarouselIndicator = Ember.View.extend({\r\n  classNameBindings: 'isActive:active',\r\n  isActive: Ember.computed(function() {\r\n    return this.get('contentIndex') === this.get('controller.activeIndex');\r\n  }).property('contentIndex', 'controller.activeIndex'),\r\n  click: function() {\r\n    return this.get('controller').to(this.get('contentIndex'));\r\n  }\r\n});\r\n\r\nEmber.Widgets.CarouselItem = Ember.View.extend({\r\n  classNames: 'item'\r\n});\r\n\r\nEmber.Handlebars.helper('carousel-component', Ember.Widgets.CarouselComponent);\r\n\r\nEmber.Handlebars.helper('carousel-item', Ember.Widgets.CarouselItem);\r\n\r\n\r\n})();//@ sourceURL=build/src/carousel.js")

eval("(function() {\r\n\r\nEmber.Widgets.EditableLabel = Ember.View.extend({\r\n  templateName: 'editable-label',\r\n  classNames: ['editable-label'],\r\n  placeholder: '',\r\n  isEditing: false,\r\n  value: null,\r\n  displayName: Ember.computed(function() {\r\n    if (Ember.isNone(this.get('value')) || this.get('value') === '') {\r\n      return this.get('placeholder');\r\n    } else {\r\n      return this.get('value');\r\n    }\r\n  }).property('value', 'placeholder'),\r\n  innerTextField: Ember.TextField.extend({\r\n    valueBinding: Ember.Binding.oneWay('parentView.value'),\r\n    didInsertElement: function() {\r\n      return this.$().focus();\r\n    },\r\n    blur: function() {\r\n      this.set('parentView.isEditing', false);\r\n      return this.set('parentView.value', this.get('value'));\r\n    }\r\n  }),\r\n  editLabel: function() {\r\n    return this.set('isEditing', true);\r\n  }\r\n});\r\n\r\nEmber.Handlebars.helper('editable-label-component', Ember.Widgets.EditableLabel);\r\n\r\n\r\n})();//@ sourceURL=build/src/editable_label.js")

eval("(function() {\r\n\r\nEmber.Widgets.ModalComponent = Ember.Component.extend(Ember.Widgets.StyleBindingsMixin, {\r\n  layoutName: 'modal',\r\n  classNames: ['modal'],\r\n  classNameBindings: ['isShowing:in', 'hasCloseButton::has-no-close-button', 'fadeEnabled:fade'],\r\n  modalPaneBackdrop: '<div class=\"modal-backdrop\"></div>',\r\n  bodyElementSelector: '.modal-backdrop',\r\n  enforceModality: false,\r\n  escToCancel: true,\r\n  backdrop: true,\r\n  isShowing: false,\r\n  hasCloseButton: true,\r\n  fade: true,\r\n  headerText: \"Modal Header\",\r\n  confirmText: \"Confirm\",\r\n  cancelText: \"Cancel\",\r\n  closeText: null,\r\n  content: \"\",\r\n  size: \"normal\",\r\n  isValid: true,\r\n  fadeEnabled: Ember.computed(function() {\r\n    if (Ember.Widgets.DISABLE_ANIMATIONS) {\r\n      return false;\r\n    }\r\n    return this.get('fade');\r\n  }).property('fade'),\r\n  confirm: Ember.K,\r\n  cancel: Ember.K,\r\n  close: Ember.K,\r\n  headerViewClass: Ember.View.extend({\r\n    templateName: 'modal_header'\r\n  }),\r\n  contentViewClass: Ember.View.extend({\r\n    template: Ember.Handlebars.compile(\"<p>{{content}}</p>\")\r\n  }),\r\n  footerViewClass: Ember.View.extend({\r\n    templateName: 'modal-footer'\r\n  }),\r\n  _headerViewClass: Ember.computed(function() {\r\n    var headerViewClass;\r\n    headerViewClass = this.get('headerViewClass');\r\n    if (typeof headerViewClass === 'string') {\r\n      return Ember.get(headerViewClass);\r\n    } else {\r\n      return headerViewClass;\r\n    }\r\n  }).property('headerViewClass'),\r\n  _contentViewClass: Ember.computed(function() {\r\n    var contentViewClass;\r\n    contentViewClass = this.get('contentViewClass');\r\n    if (typeof contentViewClass === 'string') {\r\n      return Ember.get(contentViewClass);\r\n    } else {\r\n      return contentViewClass;\r\n    }\r\n  }).property('contentViewClass'),\r\n  _footerViewClass: Ember.computed(function() {\r\n    var footerViewClass;\r\n    footerViewClass = this.get('footerViewClass');\r\n    if (typeof footerViewClass === 'string') {\r\n      return Ember.get(footerViewClass);\r\n    } else {\r\n      return footerViewClass;\r\n    }\r\n  }).property('footerViewClass'),\r\n  sizeClass: Ember.computed(function() {\r\n    switch (this.get('size')) {\r\n      case 'large':\r\n        return 'modal-lg';\r\n      case 'small':\r\n        return 'modal-sm';\r\n      default:\r\n        return '';\r\n    }\r\n  }).property('size'),\r\n  actions: {\r\n    sendCancel: function() {\r\n      var cancel;\r\n      if (!this.get('isShowing')) {\r\n        return;\r\n      }\r\n      cancel = this.get('cancel');\r\n      if (typeof cancel === 'function') {\r\n        this.cancel(this);\r\n      } else {\r\n        this.sendAction('cancel');\r\n      }\r\n      return this.hide();\r\n    },\r\n    sendConfirm: function() {\r\n      var confirm;\r\n      if (!this.get('isShowing')) {\r\n        return;\r\n      }\r\n      confirm = this.get('confirm');\r\n      if (typeof confirm === 'function') {\r\n        this.confirm(this);\r\n      } else {\r\n        this.sendAction('confirm');\r\n      }\r\n      return this.hide();\r\n    },\r\n    sendClose: function() {\r\n      var close;\r\n      if (!this.get('isShowing')) {\r\n        return;\r\n      }\r\n      close = this.get('close');\r\n      if (typeof close === 'function') {\r\n        this.close(this);\r\n      } else {\r\n        this.sendAction('close');\r\n      }\r\n      return this.hide();\r\n    }\r\n  },\r\n  didInsertElement: function() {\r\n    this._super();\r\n    if (this.get('fade')) {\r\n      this.$()[0].offsetWidth;\r\n    }\r\n    if (this.get('backdrop')) {\r\n      this._appendBackdrop();\r\n    }\r\n    Ember.run.next(this, function() {\r\n      return this.set('isShowing', true);\r\n    });\r\n    $(document.body).addClass('modal-open');\r\n    return this._setupDocumentHandlers();\r\n  },\r\n  willDestroyElement: function() {\r\n    this._super();\r\n    this._removeDocumentHandlers();\r\n    if (this._backdrop) {\r\n      return this._backdrop.remove();\r\n    }\r\n  },\r\n  keyHandler: Ember.computed(function() {\r\n    var _this = this;\r\n    return function(event) {\r\n      if (event.which === 27 && _this.get('escToCancel')) {\r\n        return _this.send('sendCancel');\r\n      }\r\n    };\r\n  }),\r\n  click: function(event) {\r\n    if (event.target !== event.currentTarget) {\r\n      return;\r\n    }\r\n    if (!this.get('enforceModality')) {\r\n      return this.send('sendCancel');\r\n    }\r\n  },\r\n  hide: function() {\r\n    var _this = this;\r\n    this.set('isShowing', false);\r\n    $(document.body).removeClass('modal-open');\r\n    if (this._backdrop) {\r\n      this._backdrop.removeClass('in');\r\n    }\r\n    if (this.get('fadeEnabled')) {\r\n      return this.$().one($.support.transition.end, function() {\r\n        return Ember.run(_this, _this.destroy);\r\n      });\r\n    } else {\r\n      return Ember.run(this, this.destroy);\r\n    }\r\n  },\r\n  _appendBackdrop: function() {\r\n    var modalPaneBackdrop, parentLayer;\r\n    parentLayer = this.$().parent();\r\n    modalPaneBackdrop = this.get('modalPaneBackdrop');\r\n    if (this.get('fadeEnabled')) {\r\n      this._backdrop = jQuery(modalPaneBackdrop).addClass('fade');\r\n    }\r\n    this._backdrop.appendTo(parentLayer);\r\n    return Ember.run.next(this, function() {\r\n      return this._backdrop.addClass('in');\r\n    });\r\n  },\r\n  _setupDocumentHandlers: function() {\r\n    var _this = this;\r\n    this._super();\r\n    if (!this._hideHandler) {\r\n      this._hideHandler = function() {\r\n        return _this.hide();\r\n      };\r\n      $(document).on('modal:hide', this._hideHandler);\r\n    }\r\n    return $(document).on('keyup', this.get('keyHandler'));\r\n  },\r\n  _removeDocumentHandlers: function() {\r\n    this._super();\r\n    $(document).off('modal:hide', this._hideHandler);\r\n    this._hideHandler = null;\r\n    return $(document).off('keyup', this.get('keyHandler'));\r\n  }\r\n});\r\n\r\nEmber.Widgets.ModalComponent.reopenClass({\r\n  rootElement: '.ember-application',\r\n  poppedModal: null,\r\n  hideAll: function() {\r\n    return $(document).trigger('modal:hide');\r\n  },\r\n  popup: function(options) {\r\n    var modal, rootElement;\r\n    if (options == null) {\r\n      options = {};\r\n    }\r\n    this.hideAll();\r\n    rootElement = options.rootElement || this.rootElement;\r\n    modal = this.create(options);\r\n    if (modal.get('targetObject.container')) {\r\n      modal.set('container', modal.get('targetObject.container'));\r\n    }\r\n    modal.appendTo(rootElement);\r\n    return modal;\r\n  }\r\n});\r\n\r\nEmber.Handlebars.helper('modal-component', Ember.Widgets.ModalComponent);\r\n\r\n\r\n})();//@ sourceURL=build/src/modal.js")

eval("(function() {\r\n\r\nEmber.Widgets.PopoverMixin = Ember.Mixin.create(Ember.Widgets.StyleBindingsMixin, Ember.Widgets.BodyEventListener, {\r\n  layoutName: 'popover',\r\n  classNames: ['popover'],\r\n  classNameBindings: ['isShowing:in', 'fadeEnabled:fade', 'placement'],\r\n  styleBindings: ['left', 'top', 'display', 'visibility'],\r\n  targetElement: null,\r\n  contentViewClass: null,\r\n  fade: true,\r\n  escToCancel: true,\r\n  placement: 'top',\r\n  display: 'block',\r\n  visibility: 'hidden',\r\n  debounceTime: 100,\r\n  fadeEnabled: Ember.computed(function() {\r\n    if (Ember.Widgets.DISABLE_ANIMATIONS) {\r\n      return false;\r\n    }\r\n    return this.get('fade');\r\n  }).property('fade'),\r\n  left: 0,\r\n  top: 0,\r\n  marginTop: 23,\r\n  marginLeft: 10,\r\n  isShowing: false,\r\n  inserted: false,\r\n  title: '',\r\n  content: '',\r\n  _resizeHandler: null,\r\n  _scrollHandler: null,\r\n  _contentViewClass: Ember.computed(function() {\r\n    if (this.get('contentViewClass')) {\r\n      return this.get('contentViewClass');\r\n    }\r\n    return Ember.View.extend({\r\n      content: Ember.computed.alias('parentView.content'),\r\n      templateName: 'view-parent-view-content'\r\n    });\r\n  }).property('contentViewClass'),\r\n  didInsertElement: function() {\r\n    this._super();\r\n    this.snapToPosition();\r\n    this.set('visibility', 'visible');\r\n    return this.set('isShowing', true);\r\n  },\r\n  bodyClick: function() {\r\n    return this.hide();\r\n  },\r\n  hide: function() {\r\n    var _this = this;\r\n    if (this.get('isDestroyed')) {\r\n      return;\r\n    }\r\n    this.set('isShowing', false);\r\n    if (this.get('fadeEnabled')) {\r\n      return this.$().one($.support.transition.end, function() {\r\n        return Ember.run(_this, _this.destroy);\r\n      });\r\n    } else {\r\n      return Ember.run(this, this.destroy);\r\n    }\r\n  },\r\n  /*\r\n  Calculate the offset of the given iframe relative to the top window.\r\n  - Walks up the iframe chain, checking the offset of each one till it reaches top\r\n  - Only works with friendly iframes.\r\n  - Takes into account scrolling, but comes up with a result relative to\r\n  top iframe, regardless of being visibile withing intervening frames.\r\n  \r\n  @param window win    the iframe we're interested in (e.g. window)\r\n  @param object pos   an object containing the offset so far:\r\n  { left: [x], top: [y] }\r\n  (optional - initializes with 0,0 if undefined)\r\n  @return pos object above\r\n  \r\n  via http://stackoverflow.com/a/9676655\r\n  */\r\n\r\n  computeFrameOffset: function(win, pos) {\r\n    var found, frame, frames, rect, _i, _len;\r\n    if (pos == null) {\r\n      pos = {\r\n        top: 0,\r\n        left: 0\r\n      };\r\n    }\r\n    frames = win.parent.document.getElementsByTagName(\"iframe\");\r\n    found = false;\r\n    for (_i = 0, _len = frames.length; _i < _len; _i++) {\r\n      frame = frames[_i];\r\n      if (frame.contentWindow === win) {\r\n        found = true;\r\n        break;\r\n      }\r\n    }\r\n    if (found) {\r\n      rect = frame.getBoundingClientRect();\r\n      pos.left += rect.left;\r\n      pos.top += rect.top;\r\n      if (win !== top) {\r\n        this.computeFrameOffset(win.parent, pos);\r\n      }\r\n    }\r\n    return pos;\r\n  },\r\n  getOffset: function($target) {\r\n    var doc, pos, win;\r\n    pos = $target.offset();\r\n    doc = $target[0].ownerDocument;\r\n    win = doc.defaultView;\r\n    return this.computeFrameOffset(win, pos);\r\n  },\r\n  snapToPosition: function() {\r\n    var $target, actualHeight, actualWidth, pos;\r\n    $target = $(this.get('targetElement'));\r\n    if ((this.get('_state') || this.get('state')) !== 'inDOM') {\r\n      return;\r\n    }\r\n    actualWidth = this.$()[0].offsetWidth;\r\n    actualHeight = this.$()[0].offsetHeight;\r\n    if (Ember.isEmpty($target)) {\r\n      pos = {\r\n        top: this.get('top'),\r\n        left: this.get('left'),\r\n        width: 0,\r\n        height: 0\r\n      };\r\n    } else {\r\n      pos = this.getOffset($target);\r\n      pos.width = $target[0].offsetWidth;\r\n      pos.height = $target[0].offsetHeight;\r\n    }\r\n    switch (this.get('placement')) {\r\n      case 'bottom':\r\n        this.set('top', pos.top + pos.height);\r\n        this.set('left', pos.left + pos.width / 2 - actualWidth / 2);\r\n        break;\r\n      case 'top':\r\n        this.set('top', pos.top - actualHeight);\r\n        this.set('left', pos.left + pos.width / 2 - actualWidth / 2);\r\n        break;\r\n      case 'top-right':\r\n        this.set('top', pos.top);\r\n        this.set('left', pos.left + pos.width);\r\n        break;\r\n      case 'top-left':\r\n        this.set('top', pos.top);\r\n        this.set('left', pos.left - actualWidth);\r\n        break;\r\n      case 'bottom-right':\r\n        this.set('top', pos.top + pos.height);\r\n        this.set('left', pos.left + pos.width - actualWidth);\r\n        break;\r\n      case 'bottom-left':\r\n        this.set('top', pos.top + pos.height);\r\n        this.set('left', pos.left);\r\n        break;\r\n      case 'left':\r\n        this.set('top', pos.top - this.get('marginTop'));\r\n        this.set('left', pos.left - actualWidth);\r\n        break;\r\n      case 'right':\r\n        this.set('top', pos.top - this.get('marginTop'));\r\n        this.set('left', pos.left + pos.width);\r\n        break;\r\n    }\r\n    this.correctIfOffscreen();\r\n    if (!Ember.isEmpty($target)) {\r\n      return this.positionArrow();\r\n    }\r\n  },\r\n  positionArrow: function() {\r\n    var $target, arrowSize, left, pos, top;\r\n    $target = $(this.get('targetElement'));\r\n    pos = this.getOffset($target);\r\n    pos.width = $target[0].offsetWidth;\r\n    pos.height = $target[0].offsetHeight;\r\n    arrowSize = 22;\r\n    switch (this.get('placement')) {\r\n      case 'left':\r\n      case 'right':\r\n        top = pos.top + pos.height / 2 - this.get('top') - arrowSize / 2;\r\n        return this.set('arrowStyle', \"margin-top:\" + top + \"px;\");\r\n      case 'top':\r\n      case 'bottom':\r\n        left = pos.left + pos.width / 2 - this.get('left') - arrowSize / 2;\r\n        return this.set('arrowStyle', \"margin-left:\" + left + \"px;\");\r\n    }\r\n  },\r\n  correctIfOffscreen: function() {\r\n    var actualHeight, actualWidth, bodyHeight, bodyWidth;\r\n    bodyWidth = $('body').width();\r\n    bodyHeight = $('body').height();\r\n    actualWidth = this.$()[0].offsetWidth;\r\n    actualHeight = this.$()[0].offsetHeight;\r\n    if (this.get('left') + actualWidth > bodyWidth) {\r\n      this.set('left', bodyWidth - actualWidth - this.get('marginLeft'));\r\n    }\r\n    if (this.get('left') < 0) {\r\n      this.set('left', this.get('marginLeft'));\r\n    }\r\n    if (this.get('top') + actualHeight > bodyHeight) {\r\n      this.set('top', bodyHeight - actualHeight - this.get('marginTop'));\r\n    }\r\n    if (this.get('top') < 0) {\r\n      return this.set('top', this.get('marginTop'));\r\n    }\r\n  },\r\n  keyHandler: Ember.computed(function() {\r\n    var _this = this;\r\n    return function(event) {\r\n      if (event.keyCode === 27 && _this.get('escToCancel')) {\r\n        return _this.hide();\r\n      }\r\n    };\r\n  }),\r\n  debounceSnapToPosition: Ember.computed(function() {\r\n    var _this = this;\r\n    return function() {\r\n      return Ember.run.debounce(_this, _this.snapToPosition, _this.get('debounceTime'));\r\n    };\r\n  }),\r\n  _setupDocumentHandlers: function() {\r\n    var _this = this;\r\n    this._super();\r\n    if (!this._hideHandler) {\r\n      this._hideHandler = function() {\r\n        return _this.hide();\r\n      };\r\n      $(document).on('popover:hide', this._hideHandler);\r\n    }\r\n    if (!this._resizeHandler) {\r\n      this._resizeHandler = this.get('debounceSnapToPosition');\r\n      $(document).on('resize', this._resizeHandler);\r\n    }\r\n    if (!this._scrollHandler) {\r\n      this._scrollHandler = this.get('debounceSnapToPosition');\r\n      $(document).on('scroll', this._scrollHandler);\r\n    }\r\n    return $(document).on('keyup', this.get('keyHandler'));\r\n  },\r\n  _removeDocumentHandlers: function() {\r\n    this._super();\r\n    $(document).off('popover:hide', this._hideHandler);\r\n    this._hideHandler = null;\r\n    $(document).off('resize', this._resizeHandler);\r\n    this._resizeHandler = null;\r\n    $(document).off('scroll', this._scrollHandler);\r\n    this._scrollHandler = null;\r\n    return $(document).off('keyup', this.get('keyHandler'));\r\n  }\r\n});\r\n\r\nEmber.Widgets.PopoverComponent = Ember.Component.extend(Ember.Widgets.PopoverMixin);\r\n\r\nEmber.Widgets.PopoverComponent.reopenClass({\r\n  rootElement: '.ember-application',\r\n  hideAll: function() {\r\n    return $(document).trigger('popover:hide');\r\n  },\r\n  popup: function(options) {\r\n    var popover, rootElement;\r\n    this.hideAll();\r\n    rootElement = options.rootElement || this.rootElement;\r\n    popover = this.create(options);\r\n    if (popover.get('targetObject.container')) {\r\n      popover.set('container', popover.get('targetObject.container'));\r\n    }\r\n    popover.appendTo(rootElement);\r\n    return popover;\r\n  }\r\n});\r\n\r\nEmber.Handlebars.helper('popover-component', Ember.Widgets.PopoverComponent);\r\n\r\n\r\n})();//@ sourceURL=build/src/popover.js")

eval("(function() {\r\n\r\nEmber.Widgets.PopoverLinkComponent = Ember.Component.extend({\r\n  classNames: ['popover-link'],\r\n  classNameBindings: ['disabled'],\r\n  placement: 'top',\r\n  content: null,\r\n  title: null,\r\n  contentViewClass: null,\r\n  disabled: false,\r\n  popoverClassNames: [],\r\n  rootElement: '.ember-application',\r\n  fade: true,\r\n  _contentViewClass: Ember.computed(function() {\r\n    var contentViewClass;\r\n    contentViewClass = this.get('contentViewClass');\r\n    if (typeof contentViewClass === 'string') {\r\n      return Ember.get(contentViewClass);\r\n    }\r\n    return contentViewClass;\r\n  }).property('contentViewClass'),\r\n  click: function(event) {\r\n    var popover, popoverView;\r\n    if (this.get('disabled')) {\r\n      return;\r\n    }\r\n    popover = this.get('_popover');\r\n    if (((popover != null ? popover.get('_state') : void 0) || (popover != null ? popover.get('state') : void 0)) === 'inDOM') {\r\n      return popover.hide();\r\n    } else {\r\n      popoverView = Ember.View.extend(Ember.Widgets.PopoverMixin, {\r\n        layoutName: 'popover-link-popover',\r\n        classNames: this.get('popoverClassNames'),\r\n        controller: this,\r\n        targetElement: this.get('element'),\r\n        container: this.get('container'),\r\n        placement: Ember.computed.alias('controller.placement'),\r\n        title: Ember.computed.alias('controller.title'),\r\n        contentViewClass: this.get('_contentViewClass'),\r\n        fade: this.get('fade')\r\n      });\r\n      popover = popoverView.create();\r\n      this.set('_popover', popover);\r\n      return popover.appendTo(this.get('rootElement'));\r\n    }\r\n  }\r\n});\r\n\r\nEmber.Handlebars.helper('popover-link-component', Ember.Widgets.PopoverLinkComponent);\r\n\r\n\r\n})();//@ sourceURL=build/src/popover_link.js")

eval("(function() {\r\n\r\nEmber.Widgets.SelectOptionView = Ember.ListItemView.extend({\r\n  tagName: 'li',\r\n  templateName: 'select-item',\r\n  layoutName: 'select-item-layout',\r\n  classNames: 'ember-select-result-item',\r\n  classNameBindings: Ember.A(['content.isGroupOption:ember-select-group', 'isHighlighted:highlighted']),\r\n  labelPath: Ember.computed.alias('controller.optionLabelPath'),\r\n  isHighlighted: Ember.computed(function() {\r\n    return this.get('controller.highlighted') === this.get('content');\r\n  }).property('controller.highlighted', 'content'),\r\n  labelPathDidChange: Ember.observer(function() {\r\n    var labelPath, path;\r\n    labelPath = this.get('labelPath');\r\n    path = labelPath ? \"content.\" + labelPath : 'content';\r\n    Ember.defineProperty(this, 'label', Ember.computed.alias(path));\r\n    return this.notifyPropertyChange('label');\r\n  }, 'content', 'labelPath'),\r\n  didInsertElement: function() {\r\n    this._super();\r\n    return this.labelPathDidChange();\r\n  },\r\n  updateContext: function(context) {\r\n    this._super(context);\r\n    return this.set('content', context);\r\n  },\r\n  click: function() {\r\n    if (this.get('content.isGroupOption')) {\r\n      return;\r\n    }\r\n    this.set('controller.selection', this.get('content'));\r\n    this.get('controller').userDidSelect(this.get('content'));\r\n    if (this.get('controller.showDropdown')) {\r\n      this.get('controller').send('hideDropdown');\r\n      return false;\r\n    }\r\n  },\r\n  mouseEnter: function() {\r\n    if (this.get('content.isGroupOption')) {\r\n      return;\r\n    }\r\n    return this.set('controller.highlighted', this.get('content'));\r\n  }\r\n});\r\n\r\nEmber.Widgets.SelectComponent = Ember.Component.extend(Ember.Widgets.BodyEventListener, Ember.AddeparMixins.ResizeHandlerMixin, {\r\n  layoutName: 'select',\r\n  classNames: 'ember-select',\r\n  attributeBindings: Ember.A(['tabindex']),\r\n  classNameBindings: Ember.A(['showDropdown:open', 'isDropup:dropup']),\r\n  itemViewClass: 'Ember.Widgets.SelectOptionView',\r\n  prompt: 'Select a Value',\r\n  placeholder: void 0,\r\n  disabled: false,\r\n  highlightedIndex: -1,\r\n  tabindex: -1,\r\n  showDropdown: false,\r\n  dropdownHeight: 300,\r\n  rowHeight: 26,\r\n  sortLabels: true,\r\n  titleOnOptions: false,\r\n  isSelect: false,\r\n  isDropup: false,\r\n  isDropdownMenuPulledRight: false,\r\n  dropdownToggleIcon: 'fa fa-caret-down',\r\n  buttonClass: 'btn btn-default',\r\n  dropdownMenuClass: '',\r\n  content: Ember.A([]),\r\n  selection: null,\r\n  query: '',\r\n  optionLabelPath: '',\r\n  optionValuePath: '',\r\n  optionGroupPath: '',\r\n  optionDefaultPath: '',\r\n  selectMenuView: null,\r\n  updateDropdownLayout: Ember.observer(function() {\r\n    var dropdownButton, dropdownButtonHeight, dropdownButtonOffset, dropdownMargin, dropdownMenu, dropdownMenuBottom, dropdownMenuHeight, dropdownMenuOffset, dropdownMenuWidth, dropupMenuTop;\r\n    if ((this.get('_state') || this.get('state')) !== 'inDOM' || this.get('showDropdown') === false) {\r\n      return;\r\n    }\r\n    this.$('.js-dropdown-menu').css('visibility', 'hidden');\r\n    dropdownButton = this.$('.js-dropdown-toggle')[0];\r\n    dropdownButtonHeight = this.$(dropdownButton).outerHeight();\r\n    dropdownButtonOffset = this.$(dropdownButton).offset();\r\n    dropdownMenu = this.$('.js-dropdown-menu')[0];\r\n    dropdownMenuHeight = this.$(dropdownMenu).outerHeight();\r\n    dropdownMenuWidth = this.$(dropdownMenu).outerWidth();\r\n    dropdownMenuOffset = this.$(dropdownMenu).offset();\r\n    dropdownMargin = 15;\r\n    if (this.get('isDropup')) {\r\n      dropdownMenuBottom = dropdownButtonOffset.top + dropdownButtonHeight + dropdownMenuHeight + dropdownMargin;\r\n    } else {\r\n      dropdownMenuBottom = dropdownMenuOffset.top + dropdownMenuHeight;\r\n    }\r\n    dropupMenuTop = dropdownButtonOffset.top - dropdownMenuHeight - dropdownMargin;\r\n    this.set('isDropup', dropupMenuTop > window.scrollY && dropdownMenuBottom > window.innerHeight);\r\n    this.set('isDropdownMenuPulledRight', dropdownButtonOffset.left + dropdownMenuWidth + dropdownMargin > window.innerWidth);\r\n    return this.$('.js-dropdown-menu').css('visibility', 'visible');\r\n  }, 'showDropdown'),\r\n  onResizeEnd: function() {\r\n    return Ember.run(this, this.updateDropdownLayout);\r\n  },\r\n  itemView: Ember.computed(function() {\r\n    var itemViewClass;\r\n    itemViewClass = this.get('itemViewClass');\r\n    if (typeof itemViewClass === 'string') {\r\n      return Ember.get(itemViewClass);\r\n    }\r\n    return itemViewClass;\r\n  }).property('itemViewClass'),\r\n  selectedItemView: Ember.computed(function() {\r\n    return this.get('itemView').extend({\r\n      tagName: 'span',\r\n      labelPath: Ember.computed.alias('controller.optionLabelPath'),\r\n      context: Ember.computed.alias('controller.selection')\r\n    });\r\n  }).property('itemView'),\r\n  selectedLabel: Ember.computed(function() {\r\n    return Ember.get(this.get('selection'), this.get('optionLabelPath'));\r\n  }).property('selection', 'optionLabelPath'),\r\n  searchView: Ember.TextField.extend({\r\n    placeholder: Ember.computed.alias('parentView.placeholder'),\r\n    valueBinding: 'parentView.query',\r\n    showDropdownDidChange: Ember.observer(function() {\r\n      return Ember.run.schedule('afterRender', this, function() {\r\n        if ((this.get('_state') || this.get('state')) === 'inDOM') {\r\n          return this.$().focus();\r\n        }\r\n      });\r\n    }, 'parentView.showDropdown')\r\n  }),\r\n  listView: Ember.ListView.extend({\r\n    style: Ember.computed(function() {\r\n      var height;\r\n      height = Math.min(this.get('height'), this.get('totalHeight'));\r\n      return \"height: \" + height + \"px\";\r\n    }).property('height', 'totalHeight')\r\n  }),\r\n  preparedContent: Ember.computed(function() {\r\n    if (this.get('sortLabels')) {\r\n      return this.get('sortedFilteredContent');\r\n    } else {\r\n      return this.get('filteredContent');\r\n    }\r\n  }).property('sortLabels', 'filteredContent', 'sortedFilteredContent'),\r\n  contentProxy: Ember.computed(function() {\r\n    var ContentProxy, matcher, optionLabelPath, query,\r\n      _this = this;\r\n    matcher = function(searchText, item) {\r\n      return _this.matcher(searchText, item);\r\n    };\r\n    optionLabelPath = this.get('optionLabelPath');\r\n    query = this.get('query');\r\n    ContentProxy = Ember.ObjectProxy.extend({\r\n      filteredContent: Ember.computed(function() {\r\n        return (this.get('content') || []).filter(function(item) {\r\n          return matcher(query, item);\r\n        });\r\n      }).property(\"content.@each.\" + optionLabelPath),\r\n      sortedFilteredContent: Ember.computed(function() {\r\n        var _this = this;\r\n        return _.sortBy(this.get('filteredContent'), function(item) {\r\n          var _ref;\r\n          return (_ref = Ember.get(item, optionLabelPath)) != null ? _ref.toLowerCase() : void 0;\r\n        });\r\n      }).property(\"filteredContent\")\r\n    });\r\n    return ContentProxy.create({\r\n      content: this.get('content')\r\n    });\r\n  }).property('content', 'optionLabelPath', 'query'),\r\n  filteredContent: Ember.computed.alias('contentProxy.filteredContent'),\r\n  sortedFilteredContent: Ember.computed.alias('contentProxy.sortedFilteredContent'),\r\n  groupedContent: Ember.computed(function() {\r\n    var content, groups, path, result;\r\n    path = this.get('optionGroupPath');\r\n    content = this.get('preparedContent');\r\n    if (!path) {\r\n      return content;\r\n    }\r\n    groups = _.groupBy(content, function(item) {\r\n      return Ember.get(item, path);\r\n    });\r\n    result = Ember.A();\r\n    _.keys(groups).sort().forEach(function(key) {\r\n      result.pushObject(Ember.Object.create({\r\n        isGroupOption: true,\r\n        name: key\r\n      }));\r\n      return result.pushObjects(groups[key]);\r\n    });\r\n    return result;\r\n  }).property('preparedContent', 'optionGroupPath', 'labels.[]'),\r\n  hasNoResults: Ember.computed.empty('filteredContent'),\r\n  value: Ember.computed(function(key, value) {\r\n    var selection, valuePath;\r\n    if (arguments.length === 2) {\r\n      valuePath = this.get('optionValuePath');\r\n      selection = value;\r\n      if (valuePath) {\r\n        selection = this.get('content').findProperty(valuePath, value);\r\n      }\r\n      this.set('selection', selection);\r\n      return value;\r\n    } else {\r\n      valuePath = this.get('optionValuePath');\r\n      selection = this.get('selection');\r\n      if (valuePath) {\r\n        return Ember.get(selection, valuePath);\r\n      } else {\r\n        return selection;\r\n      }\r\n    }\r\n  }).property('selection'),\r\n  didInsertElement: function() {\r\n    this._super();\r\n    return this.setDefaultSelection();\r\n  },\r\n  matcher: function(searchText, item) {\r\n    var escapedSearchText, label, regex;\r\n    if (!searchText) {\r\n      return true;\r\n    }\r\n    label = Ember.get(item, this.get('optionLabelPath'));\r\n    escapedSearchText = searchText.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\");\r\n    regex = new RegExp(escapedSearchText, 'i');\r\n    return regex.test(label);\r\n  },\r\n  setDefaultSelection: Ember.observer(function() {\r\n    var content, defaultPath;\r\n    if (this.get('selection')) {\r\n      return;\r\n    }\r\n    content = this.get('content');\r\n    defaultPath = this.get('optionDefaultPath');\r\n    if (!(content && defaultPath)) {\r\n      return;\r\n    }\r\n    return this.set('selection', content.findProperty(defaultPath));\r\n  }, 'content.@each'),\r\n  selectableOptionsDidChange: Ember.observer(function() {\r\n    var highlighted;\r\n    if (this.get('showDropdown')) {\r\n      highlighted = this.get('highlighted');\r\n      if (!this.get('selectableOptions').contains(highlighted)) {\r\n        return this.set('highlighted', this.get('selectableOptions.firstObject'));\r\n      }\r\n    }\r\n  }, 'selectableOptions', 'showDropdown'),\r\n  /*\r\n  # SELECTION RELATED\r\n  */\r\n\r\n  KEY_EVENTS: {\r\n    8: 'deletePressed',\r\n    27: 'escapePressed',\r\n    13: 'enterPressed',\r\n    38: 'upArrowPressed',\r\n    40: 'downArrowPressed'\r\n  },\r\n  selectableOptions: Ember.computed(function() {\r\n    return Ember.A((this.get('groupedContent') || []).filter(function(item) {\r\n      return !Ember.get(item, 'isGroupOption');\r\n    }));\r\n  }).property('groupedContent'),\r\n  highlighted: Ember.computed(function(key, value) {\r\n    var content, index;\r\n    content = this.get('selectableOptions') || Ember.A([]);\r\n    value = value || Ember.A([]);\r\n    if (arguments.length === 1) {\r\n      index = this.get('highlightedIndex');\r\n      value = content.objectAt(index);\r\n    } else {\r\n      index = content.indexOf(value);\r\n      this.setHighlightedIndex(index, true);\r\n    }\r\n    return value;\r\n  }).property('selectableOptions', 'highlightedIndex'),\r\n  bodyClick: function() {\r\n    return this.send('hideDropdown');\r\n  },\r\n  keyDown: function(event) {\r\n    var map, method, _ref;\r\n    if (!this.get('showDropdown')) {\r\n      return this.set('showDropdown', true);\r\n    }\r\n    map = this.get('KEY_EVENTS');\r\n    method = map[event.keyCode];\r\n    if (method) {\r\n      return (_ref = this.get(method)) != null ? _ref.apply(this, arguments) : void 0;\r\n    }\r\n  },\r\n  deletePressed: Ember.K,\r\n  escapePressed: function(event) {\r\n    return this.send('hideDropdown');\r\n  },\r\n  enterPressed: function(event) {\r\n    var item;\r\n    item = this.get('highlighted');\r\n    if (!Ember.isEmpty(item)) {\r\n      this.set('selection', item);\r\n    }\r\n    if (!Ember.isEmpty(item)) {\r\n      this.userDidSelect(item);\r\n    }\r\n    this.send('hideDropdown');\r\n    return event.preventDefault();\r\n  },\r\n  upArrowPressed: function(event) {\r\n    var index, sel;\r\n    sel = this.get('highlightedIndex');\r\n    index = event.ctrlKey || event.metaKey ? 0 : sel - 1;\r\n    this.setHighlightedIndex(index, true);\r\n    return event.preventDefault();\r\n  },\r\n  downArrowPressed: function(event) {\r\n    var clen, index, sel;\r\n    sel = this.get('highlightedIndex');\r\n    clen = this.get('selectableOptions.length');\r\n    index = event.ctrlKey || event.metaKey ? clen - 1 : sel + 1;\r\n    this.setHighlightedIndex(index, true);\r\n    return event.preventDefault();\r\n  },\r\n  setHighlightedIndex: function(index, ensureVisible) {\r\n    if (!this.ensureIndex(index)) {\r\n      return;\r\n    }\r\n    this.set('highlightedIndex', index);\r\n    if (ensureVisible) {\r\n      return this.ensureVisible(index);\r\n    }\r\n  },\r\n  ensureIndex: function(index) {\r\n    var clen;\r\n    clen = this.get('selectableOptions.length');\r\n    return index >= 0 && index < clen;\r\n  },\r\n  ensureVisible: function(index) {\r\n    var $listView, endIndex, item, listView, newIndex, numRows, startIndex;\r\n    $listView = this.$('.ember-list-view');\r\n    listView = Ember.View.views[$listView.attr('id')];\r\n    if (!listView) {\r\n      return;\r\n    }\r\n    startIndex = listView._startingIndex();\r\n    numRows = listView._childViewCount() - 1;\r\n    endIndex = startIndex + numRows;\r\n    item = this.get('selectableOptions').objectAt(index);\r\n    newIndex = this.get('groupedContent').indexOf(item);\r\n    if (index === 0) {\r\n      return $listView.scrollTop(0);\r\n    } else if (newIndex < startIndex) {\r\n      return $listView.scrollTop(newIndex * this.get('rowHeight'));\r\n    } else if (newIndex >= endIndex) {\r\n      return $listView.scrollTop((newIndex - numRows + 1.5) * this.get('rowHeight'));\r\n    }\r\n  },\r\n  userDidSelect: function(selection) {\r\n    return this.sendAction('userSelected', selection);\r\n  },\r\n  actions: {\r\n    toggleDropdown: function(event) {\r\n      if (this.get('disabled')) {\r\n        return;\r\n      }\r\n      return this.toggleProperty('showDropdown');\r\n    },\r\n    hideDropdown: function(event) {\r\n      if (this.get('isDestroyed') || this.get('isDestroying')) {\r\n        return;\r\n      }\r\n      return this.set('showDropdown', false);\r\n    }\r\n  }\r\n});\r\n\r\nEmber.Handlebars.helper('select-component', Ember.Widgets.SelectComponent);\r\n\r\n\r\n})();//@ sourceURL=build/src/select.js")

eval("(function() {\r\n\r\nEmber.Widgets.MultiSelectOptionView = Ember.View.extend({\r\n  tagName: 'li',\r\n  templateName: 'multi-select-item',\r\n  classNames: 'ember-select-search-choice',\r\n  labelPath: Ember.computed.alias('controller.optionLabelPath'),\r\n  didInsertElement: function() {\r\n    this._super();\r\n    return this.labelPathDidChange();\r\n  },\r\n  labelPathDidChange: Ember.observer(function() {\r\n    var labelPath, path;\r\n    labelPath = this.get('labelPath');\r\n    path = labelPath ? \"context.\" + labelPath : 'context';\r\n    Ember.defineProperty(this, 'label', Ember.computed.alias(path));\r\n    return this.notifyPropertyChange('label');\r\n  }, 'context', 'labelPath')\r\n});\r\n\r\nEmber.Widgets.MultiSelectComponent = Ember.Widgets.SelectComponent.extend({\r\n  layoutName: 'multi-select',\r\n  selections: void 0,\r\n  choicesFieldClass: '',\r\n  placeholder: void 0,\r\n  persistentPlaceholder: void 0,\r\n  values: Ember.computed(function(key, value) {\r\n    var selections, valuePath;\r\n    if (arguments.length === 2) {\r\n      if (!value) {\r\n        return;\r\n      }\r\n      valuePath = this.get('optionValuePath');\r\n      this.set('selections', Ember.A(this.get('content').filter(function(item) {\r\n        return value.contains(Ember.get(item, valuePath));\r\n      })));\r\n      return value;\r\n    } else {\r\n      valuePath = this.get('optionValuePath');\r\n      selections = this.get('selections');\r\n      if (valuePath) {\r\n        return selections.getEach(valuePath);\r\n      } else {\r\n        return selections;\r\n      }\r\n    }\r\n  }).property('selections.@each'),\r\n  selectionItemView: Ember.Widgets.MultiSelectOptionView,\r\n  invisiblePlaceholderText: Ember.computed(function() {\r\n    if (this.get('query')) {\r\n      return this.get('query');\r\n    }\r\n    if (this.get('selections.length')) {\r\n      return this.get('persistentPlaceholder');\r\n    }\r\n    return this.get('placeholder') || this.get('persistentPlaceholder');\r\n  }).property('query', 'placeholder', 'persistentPlaceholder', 'selections.length'),\r\n  searchView: Ember.TextField.extend({\r\n    \"class\": 'ember-select-input',\r\n    valueBinding: 'parentView.query',\r\n    focusIn: function(event) {\r\n      return this.set('parentView.showDropdown', true);\r\n    },\r\n    placeholder: Ember.computed(function() {\r\n      if (this.get('parentView.selections.length')) {\r\n        return this.get('parentView.persistentPlaceholder');\r\n      }\r\n      return this.get('parentView.placeholder') || this.get('parentView.persistentPlaceholder');\r\n    }).property('parentView.placeholder', 'parentView.persistentPlaceholder', 'parentView.selections.length')\r\n  }),\r\n  preparedContent: Ember.computed(function() {\r\n    var content, selections;\r\n    content = this.get('content');\r\n    selections = this.get('selections');\r\n    if (!(content && selections)) {\r\n      return Ember.A([]);\r\n    }\r\n    if (this.get('sortLabels')) {\r\n      return this.get('sortedFilteredContent').filter(function(item) {\r\n        return !selections.contains(item);\r\n      });\r\n    } else {\r\n      return this.get('filteredContent').filter(function(item) {\r\n        return !selections.contains(item);\r\n      });\r\n    }\r\n  }).property('content.@each', 'filteredContent.[]', 'sortedFilteredContent.[]', 'selections.@each', 'sortLabels'),\r\n  selectionDidChange: Ember.observer(function() {\r\n    var selection, selections;\r\n    selections = this.get('selections');\r\n    selection = this.get('selection');\r\n    this.set('selection', null);\r\n    this.set('query', '');\r\n    if (!Ember.isEmpty(selection) && !selections.contains(selection)) {\r\n      return selections.pushObject(selection);\r\n    }\r\n  }, 'selection'),\r\n  didInsertElement: function() {\r\n    this._super();\r\n    if (!this.get('selections')) {\r\n      this.set('selections', Ember.A([]));\r\n    }\r\n    if (!this.get('values')) {\r\n      return this.set('values', Ember.A([]));\r\n    }\r\n  },\r\n  deletePressed: function(event) {\r\n    if (event.target.selectionStart === 0) {\r\n      return this.removeSelectItem(this.get('selections.lastObject'));\r\n    }\r\n  },\r\n  removeSelectItem: function(item) {\r\n    return this.get('selections').removeObject(item);\r\n  },\r\n  actions: {\r\n    removeSelectItem: function(item) {\r\n      return this.removeSelectItem(item);\r\n    }\r\n  }\r\n});\r\n\r\nEmber.Handlebars.helper('multi-select-component', Ember.Widgets.MultiSelectComponent);\r\n\r\n\r\n})();//@ sourceURL=build/src/multi_select.js")

eval("(function() {\r\n\r\nEmber.Widgets.RadioButtonComponent = Ember.Component.extend({\r\n  attributeBindings: ['type', 'checked', 'disabled'],\r\n  classNames: ['radio-input'],\r\n  tagName: 'input',\r\n  type: 'radio',\r\n  checked: Ember.computed.alias('parentView.checked'),\r\n  disabled: Ember.computed.alias('parentView._disabled')\r\n});\r\n\r\nEmber.Widgets.RadioButtonWrapperComponent = Ember.Component.extend({\r\n  layoutName: 'radio-button-layout',\r\n  value: null,\r\n  disabled: false,\r\n  selectedValue: Ember.computed.alias('parentView.selectedValue'),\r\n  classNames: ['radio-button'],\r\n  checked: false,\r\n  _disabled: Ember.computed.or('parentView.disabled', 'disabled'),\r\n  selectedValueChanged: Ember.on('init', Ember.observer(function() {\r\n    var selectedValue;\r\n    selectedValue = this.get('selectedValue');\r\n    if (!Ember.isEmpty(selectedValue) && this.get('value') === selectedValue) {\r\n      return this.set('checked', true);\r\n    } else {\r\n      return this.set('checked', false);\r\n    }\r\n  }, 'selectedValue')),\r\n  click: function(event) {\r\n    if (this.get('_disabled')) {\r\n      return;\r\n    }\r\n    this.set('checked', true);\r\n    return this.set('selectedValue', this.get('value'));\r\n  }\r\n});\r\n\r\nEmber.Widgets.RadioButtonGroupComponent = Ember.Component.extend({\r\n  classNames: ['ember-radio-button-group'],\r\n  selectedValue: null,\r\n  disabled: false\r\n});\r\n\r\nEmber.Handlebars.helper('radio-button-group-component', Ember.Widgets.RadioButtonGroupComponent);\r\n\r\nEmber.Handlebars.helper('radio-button', Ember.Widgets.RadioButtonWrapperComponent);\r\n\r\n\r\n})();//@ sourceURL=build/src/radio_button.js")

eval("(function() {\r\n\r\nEmber.Widgets.DomHelper = Ember.Mixin.create({\r\n  KEY_CODES: {\r\n    BACKSPACE: 8,\r\n    DELETE: 46,\r\n    DOWN: 40,\r\n    ENTER: 13,\r\n    LEFT: 37,\r\n    RIGHT: 39,\r\n    SPACEBAR: 32,\r\n    TAB: 9,\r\n    UP: 38,\r\n    ESCAPE: 27\r\n  },\r\n  selectElement: function(document, element, collapseMode) {\r\n    var range;\r\n    if (collapseMode == null) {\r\n      collapseMode = \"end\";\r\n    }\r\n    if (document.createRange) {\r\n      range = document.createRange();\r\n      range.selectNodeContents(element);\r\n      if (collapseMode !== \"none\") {\r\n        range.collapse(collapseMode === \"beginning\" ? true : false);\r\n      }\r\n      return this.activateRange(document, range);\r\n    }\r\n  },\r\n  activateRange: function(document, range) {\r\n    var selection;\r\n    selection = document.getSelection();\r\n    selection.removeAllRanges();\r\n    selection.addRange(range);\r\n    return range;\r\n  },\r\n  deleteRange: function(range, shouldDeleteContainer) {\r\n    var endParent, startParent;\r\n    if (shouldDeleteContainer == null) {\r\n      shouldDeleteContainer = true;\r\n    }\r\n    startParent = range.startContainer.parentNode;\r\n    endParent = range.endContainer.parentNode;\r\n    range.deleteContents();\r\n    if (this.isEmpty(startParent) && shouldDeleteContainer) {\r\n      $(startParent).remove();\r\n    }\r\n    if (this.isEmpty(endParent) && shouldDeleteContainer) {\r\n      return $(endParent).remove();\r\n    }\r\n  },\r\n  insertHTMLAtRange: function(range, html) {\r\n    return this.insertElementAtRange(range, this.createElementsFromString(html)[0]);\r\n  },\r\n  insertElementAtRange: function(range, node) {\r\n    this.deleteRange(range, false);\r\n    range.insertNode(node);\r\n    return node;\r\n  },\r\n  getCurrentRange: function() {\r\n    var idocument, iframe;\r\n    iframe = this.$('iframe.text-editor-frame')[0];\r\n    idocument = iframe.contentDocument || iframe.contentWindow.document;\r\n    if (idocument.getSelection().rangeCount > 0) {\r\n      return idocument.getSelection().getRangeAt(0);\r\n    } else {\r\n      return null;\r\n    }\r\n  },\r\n  isEmpty: function(element) {\r\n    var _ref;\r\n    return element.children.length === 0 && element.childNodes.length <= 1 && ((_ref = element.childNodes[0]) != null ? _ref.length : void 0) === 0;\r\n  },\r\n  createElementsFromString: function(string) {\r\n    return $(\"<div/>\").html(string).contents();\r\n  },\r\n  convertElementsToString: function(elements) {\r\n    return $(\"<div/>\").html(elements).html();\r\n  },\r\n  getNonEmptySideNode: function(range, left, deep) {\r\n    var index, node, nodeIsEmpty, sideNode, _ref;\r\n    if (left == null) {\r\n      left = true;\r\n    }\r\n    nodeIsEmpty = function(node) {\r\n      var _ref;\r\n      return (node != null ? (_ref = node.nodeValue) != null ? _ref.trim().length : void 0 : void 0) === 0;\r\n    };\r\n    node = range[left ? 'startContainer' : 'endContainer'];\r\n    while (((sideNode = node[left ? 'previousSibling' : 'nextSibling']) === null || nodeIsEmpty(sideNode)) && !$(node).hasClass(this.EDITOR_CLASS)) {\r\n      if (nodeIsEmpty(sideNode)) {\r\n        node = node[left ? 'previousSibling' : 'nextSibling'];\r\n      } else {\r\n        node = node.parentNode;\r\n      }\r\n    }\r\n    if (deep) {\r\n      while ((sideNode != null ? (_ref = sideNode.children) != null ? _ref.length : void 0 : void 0) > 0) {\r\n        index = left ? sideNode.children.length - 1 : 0;\r\n        sideNode = sideNode.children[index];\r\n      }\r\n    }\r\n    return sideNode;\r\n  },\r\n  getCharactersPrecedingCaret: function() {\r\n    var precedingChars, range;\r\n    range = this.getCurrentRange();\r\n    if (range === null) {\r\n      return \"\";\r\n    }\r\n    range.collapse(true);\r\n    range.setStart(range.startContainer, 0);\r\n    precedingChars = range.toString();\r\n    return precedingChars;\r\n  },\r\n  deleteCharactersPrecedingCaret: function(length, shouldDeleteContainer) {\r\n    var range;\r\n    if (shouldDeleteContainer == null) {\r\n      shouldDeleteContainer = true;\r\n    }\r\n    range = this.getCurrentRange();\r\n    if (range === null) {\r\n      return \"\";\r\n    }\r\n    range.collapse(true);\r\n    range.setStart(range.startContainer, range.endOffset - length);\r\n    return this.deleteRange(range, shouldDeleteContainer);\r\n  },\r\n  wrapInDiv: function(htmlElements) {\r\n    var endSlice, isDiv, newElement, slicedElements, _results;\r\n    isDiv = htmlElements.map(function(i, el) {\r\n      var _ref;\r\n      return ((_ref = el.tagName) != null ? _ref.toLowerCase() : void 0) === \"div\";\r\n    });\r\n    isDiv = isDiv.toArray();\r\n    if (isDiv.every(function(elem) {\r\n      return elem;\r\n    })) {\r\n      return;\r\n    }\r\n    if (htmlElements.length === 1 && htmlElements[0].className === \"rangySelectionBoundary\") {\r\n      return;\r\n    }\r\n    _results = [];\r\n    while (htmlElements.length > 0) {\r\n      endSlice = isDiv.indexOf(true);\r\n      if (endSlice === -1) {\r\n        endSlice = isDiv.length;\r\n      }\r\n      if (endSlice > 0) {\r\n        slicedElements = htmlElements.slice(0, endSlice);\r\n        newElement = slicedElements.wrapAll('<div/>');\r\n        slicedElements.wrapAll('<div/>').parent().replaceWith(newElement);\r\n      } else {\r\n        endSlice = 1;\r\n      }\r\n      htmlElements = htmlElements.slice(endSlice);\r\n      _results.push(isDiv = isDiv.slice(endSlice));\r\n    }\r\n    return _results;\r\n  }\r\n});\r\n\r\n\r\n})();//@ sourceURL=build/src/text_widget/dom_helper.js")

eval("(function() {\r\n\r\nEmber.Widgets.TextEditorComponent = Ember.Component.extend(Ember.Widgets.DomHelper, {\r\n  layoutName: 'text-editor',\r\n  selectedFontName: 'Helvetica Neue',\r\n  selectedFontSize: '2',\r\n  selectedForeColor: 'rgb(0, 0, 0)',\r\n  isToolbarVisible: true,\r\n  EDITOR_CLASS: 'text-editor',\r\n  PLACEHOLDER_TEXT: 'Click to edit',\r\n  INVISIBLE_CHAR: '\\uFEFF',\r\n  commands: Ember.A(['bold', 'italic', 'underline', 'fontName', 'fontSize', 'foreColor', 'indent', 'outdent', 'insertOrderedList', 'insertUnorderedList', 'justifyLeft', 'justifyCenter', 'justifyRight', 'strikeThrough']),\r\n  iframeHeadContents: Ember.computed(function() {\r\n    return \"<style>\\n  html,\\n  body {\\n    min-height: 0;\\n    min-width: 0;\\n    margin: 0;\\n    background: transparent;\\n    font-family: \\\"Helvetica Neue\\\";\\n  }\\n  .\" + this.EDITOR_CLASS + \" {\\n  min-height: 100%;\\n  -webkit-box-sizing: border-box;\\n  -moz-box-sizing: border-box;\\n  box-sizing: border-box;\\n  padding: 5px;\\n}\\n.\" + this.EDITOR_CLASS + \":focus {\\n    outline: none;\\n  }\\n  .non-editable {\\n    display: inline-block;\\n    padding: 0 4px;\\n    margin: 0 1px;\\n    background-color: #e7e7e7;\\n    list-style-type: none;\\n  }\\n  .configurable {\\n    cursor: pointer;\\n  }\\n  div:first-of-type:empty:not(:focus):before {\\n    content: attr(data-ph);\\n    color: grey;\\n    font-style: italic;\\n  }\\n</style>\";\r\n  }).property('EDITOR_CLASS'),\r\n  iframeBodyContents: Ember.computed(function() {\r\n    return '<div data-ph=\"' + this.PLACEHOLDER_TEXT + '\"></div>';\r\n  }).property('PLACEHOLDER_TEXT'),\r\n  getEditor: function() {\r\n    return this.$('iframe.text-editor-frame').contents().find('.' + this.EDITOR_CLASS);\r\n  },\r\n  getDocument: function() {\r\n    var iframe;\r\n    iframe = this.$('iframe.text-editor-frame')[0];\r\n    return iframe.contentDocument || iframe.contentWindow.document;\r\n  },\r\n  selectLastElement: function() {\r\n    var iframeDocument, range, selection;\r\n    iframeDocument = this.getDocument();\r\n    selection = iframeDocument.getSelection();\r\n    selection.removeAllRanges();\r\n    range = iframeDocument.createRange();\r\n    if (iframeDocument.body.lastChild.innerHTML.length === 0) {\r\n      iframeDocument.body.lastChild.innerHTML = this.INVISIBLE_CHAR;\r\n    }\r\n    range.selectNodeContents(iframeDocument.body.lastChild);\r\n    return selection.addRange(range);\r\n  },\r\n  didInsertElement: function() {\r\n    var $body, $head, $iframe, $iframeContents, iframe,\r\n      _this = this;\r\n    this._super();\r\n    $iframe = this.$('iframe.text-editor-frame');\r\n    $iframeContents = $iframe.contents();\r\n    $head = $iframeContents.find('head');\r\n    $head.append(this.get('iframeHeadContents'));\r\n    $body = $iframeContents.find('body');\r\n    $body.addClass(this.EDITOR_CLASS);\r\n    $body.attr('contentEditable', true);\r\n    $body.append(this.get('iframeBodyContents'));\r\n    iframe = $iframe[0];\r\n    iframe.contentWindow.onkeyup = function(event) {\r\n      return _this.keyUp(event);\r\n    };\r\n    iframe.contentWindow.onkeydown = function(event) {\r\n      return _this.keyDown(event);\r\n    };\r\n    iframe.contentWindow.onmouseup = function(event) {\r\n      return _this.mouseUp(event);\r\n    };\r\n    iframe.contentWindow.onmousedown = function(event) {\r\n      return _this.mouseDown(event);\r\n    };\r\n    iframe.contentWindow.onclick = function(event) {\r\n      return _this.click(event);\r\n    };\r\n    return this.get('commands').forEach(function(command) {\r\n      return _this.set(command, function(arg) {\r\n        _this.getDocument().execCommand(command, true, arg);\r\n        return _this.queryCommandState();\r\n      });\r\n    });\r\n  },\r\n  keyUp: function(event) {\r\n    var $body, $iframe, $iframeContents;\r\n    if (event.keyCode === this.KEY_CODES.BACKSPACE) {\r\n      $iframe = this.$('iframe.text-editor-frame');\r\n      $iframeContents = $iframe.contents();\r\n      $body = $iframeContents.find('body');\r\n      if (!$body.children().length) {\r\n        $body.append(this.get('iframeBodyContents'));\r\n        return this.selectLastElement();\r\n      }\r\n    } else {\r\n      return this.queryCommandState();\r\n    }\r\n  },\r\n  mouseUp: function(event) {\r\n    return this.queryCommandState();\r\n  },\r\n  queryCommandState: function() {\r\n    var fontName, idocument;\r\n    idocument = this.getDocument();\r\n    this.set('isBold', idocument.queryCommandState('bold'));\r\n    this.set('isItalic', idocument.queryCommandState('italic'));\r\n    this.set('isUnderline', idocument.queryCommandState('underline'));\r\n    this.set('isJustifyLeft', idocument.queryCommandState('justifyLeft'));\r\n    this.set('isJustifyCenter', idocument.queryCommandState('justifyCenter'));\r\n    this.set('isJustifyRight', idocument.queryCommandState('justifyRight'));\r\n    fontName = idocument.queryCommandValue('fontName') || '';\r\n    this.set('selectedFontName', fontName.replace(/^'/, '').replace(/'$/, ''));\r\n    this.set('selectedFontSize', idocument.queryCommandValue('fontSize'));\r\n    return this.set('selectedForeColor', idocument.queryCommandValue('foreColor'));\r\n  },\r\n  click: function(event) {\r\n    return Ember.K;\r\n  },\r\n  keyDown: function(event) {\r\n    return Ember.K;\r\n  },\r\n  mouseDown: function(event) {\r\n    return Ember.K;\r\n  }\r\n});\r\n\r\n\r\n})();//@ sourceURL=build/src/text_widget/text_editor.js")

eval("(function() {\r\n\r\nEmber.Widgets.BaseNonEditablePill = Ember.Controller.extend(Ember.Widgets.DomHelper, {\r\n  textEditor: null,\r\n  params: Ember.computed(function() {\r\n    return {};\r\n  }),\r\n  name: null,\r\n  result: function() {\r\n    return Ember.K;\r\n  },\r\n  configurable: false,\r\n  configure: function() {\r\n    return this.send('modalConfirm');\r\n  },\r\n  actions: {\r\n    modalConfirm: function() {\r\n      if (this.get('params.pillId')) {\r\n        return this.get('textEditor').updatePill(this);\r\n      } else {\r\n        this.set('params.pillId', this.get('textEditor').getNewPillId());\r\n        this.set('params.type', \"\" + this.constructor);\r\n        return this.get('textEditor').insertPill(this);\r\n      }\r\n    },\r\n    modalCancel: function() {\r\n      return Ember.K;\r\n    }\r\n  },\r\n  updateContent: function() {\r\n    return $(this.get('pillElement')).text(this.result());\r\n  },\r\n  render: function() {\r\n    var key, span, value, _ref;\r\n    span = this.createElementsFromString(\"<span></span>\");\r\n    span.addClass('non-editable');\r\n    if (this.get('configurable')) {\r\n      span.addClass('configurable');\r\n    }\r\n    span.attr({\r\n      'title': this.get('name')\r\n    });\r\n    span.attr('contentEditable', false);\r\n    _ref = this.get('params');\r\n    for (key in _ref) {\r\n      value = _ref[key];\r\n      span.attr('data-' + Ember.String.dasherize(key), value);\r\n    }\r\n    this.set('pillElement', span);\r\n    this.updateContent(span);\r\n    return span[0];\r\n  }\r\n});\r\n\r\nEmber.Widgets.NonEditableTextPill = Ember.Widgets.BaseNonEditablePill.extend({\r\n  name: \"Custom Text\",\r\n  text: Ember.computed.alias('params.text'),\r\n  result: function() {\r\n    return this.get('params.text');\r\n  },\r\n  configurable: true,\r\n  configure: function() {\r\n    var modal;\r\n    return modal = Ember.Widgets.ModalComponent.popup({\r\n      content: this,\r\n      targetObject: this,\r\n      confirm: \"modalConfirm\",\r\n      cancel: \"modalCancel\",\r\n      contentViewClass: Ember.View.extend({\r\n        templateName: 'non-editable-text-pill-configuration'\r\n      }),\r\n      headerText: this.get('name'),\r\n      confirmText: \"Insert\"\r\n    });\r\n  }\r\n});\r\n\r\nEmber.Widgets.TodaysDatePill = Ember.Widgets.BaseNonEditablePill.extend({\r\n  name: \"Today's Date\",\r\n  result: function() {\r\n    return Date();\r\n  }\r\n});\r\n\r\nEmber.Widgets.PillSelect = Ember.Widgets.SelectComponent.extend({\r\n  templateName: 'text-editor-pill-menu',\r\n  isSelect: true,\r\n  showButton: true\r\n});\r\n\r\nEmber.Widgets.PillInsertMixin = Ember.Mixin.create({\r\n  pillOptions: Ember.A([Ember.Widgets.TodaysDatePill, Ember.Widgets.NonEditableTextPill]),\r\n  _pillOptions: Ember.computed(function() {\r\n    var _this = this;\r\n    return Ember.A(this.getWithDefault('pillOptions', []).map(function(option) {\r\n      return {\r\n        label: option.create().name,\r\n        value: option\r\n      };\r\n    }));\r\n  }).property('pillOptions'),\r\n  actions: {\r\n    insertPill: function(pillOption) {\r\n      var selectedPillOption;\r\n      selectedPillOption = pillOption.value.create({\r\n        textEditor: this.get('textEditor') || this\r\n      });\r\n      selectedPillOption.configure();\r\n      return this.set('selectedPillOption', null);\r\n    }\r\n  }\r\n});\r\n\r\n\r\n})();//@ sourceURL=build/src/text_widget/non_editable_pill.js")

eval("(function() {\r\n\r\nEmber.Widgets.TextEditorConfigComponent = Ember.Component.extend({\r\n  layoutName: 'text-editor-config',\r\n  classNames: Ember.A(['ember-text-editor-toolbar']),\r\n  selectedFontName: 'Helvetica Neue',\r\n  selectedFontSize: '2',\r\n  selectedForeColor: 'rgb(0, 0, 0)',\r\n  textEditor: null,\r\n  fontNames: Ember.computed(function() {\r\n    return Ember.A(['Arial', 'Calibri', 'Cambria', 'Consolas', 'Corsiva', 'Courier New', 'Georgia', 'Helvetica Neue', 'Helvetica', 'Sans-Serif', 'Serif', 'Syncopate', 'Times New Roman', 'Trebuchet MS', 'Verdana']);\r\n  }),\r\n  fontSizes: Ember.computed(function() {\r\n    return Ember.A([\r\n      {\r\n        size: '1',\r\n        name: '8'\r\n      }, {\r\n        size: '2',\r\n        name: '10'\r\n      }, {\r\n        size: '3',\r\n        name: '12'\r\n      }, {\r\n        size: '4',\r\n        name: '14'\r\n      }, {\r\n        size: '5',\r\n        name: '18'\r\n      }, {\r\n        size: '6',\r\n        name: '24'\r\n      }, {\r\n        size: '7',\r\n        name: '36'\r\n      }\r\n    ]);\r\n  }),\r\n  fontChooserItemViewClass: Ember.Widgets.SelectOptionView.extend({\r\n    templateName: 'font-chooser-item',\r\n    style: Ember.computed(function() {\r\n      return \"font-family:\" + (this.get('label')) + \";\";\r\n    }).property('label')\r\n  }),\r\n  actions: {\r\n    applyFontSize: function(options) {\r\n      this.get('textEditor').fontSize(options.size);\r\n      return this.get('textEditor').getEditor().focus();\r\n    },\r\n    applyFontName: function(font) {\r\n      this.get('textEditor').fontName(font);\r\n      return this.get('textEditor').getEditor().focus();\r\n    },\r\n    applyForeColor: function(color) {\r\n      this.get('textEditor').foreColor(color);\r\n      return this.get('textEditor').getEditor().focus();\r\n    },\r\n    toggleBold: function() {\r\n      this.get('textEditor').bold();\r\n      return this.get('textEditor').getEditor().focus();\r\n    },\r\n    toggleItalic: function() {\r\n      this.get('textEditor').italic();\r\n      return this.get('textEditor').getEditor().focus();\r\n    },\r\n    toggleUnderline: function() {\r\n      this.get('textEditor').underline();\r\n      return this.get('textEditor').getEditor().focus();\r\n    },\r\n    justifyLeft: function() {\r\n      this.get('textEditor').justifyLeft();\r\n      return this.get('textEditor').getEditor().focus();\r\n    },\r\n    justifyCenter: function() {\r\n      this.get('textEditor').justifyCenter();\r\n      return this.get('textEditor').getEditor().focus();\r\n    },\r\n    justifyRight: function() {\r\n      this.get('textEditor').justifyRight();\r\n      return this.get('textEditor').getEditor().focus();\r\n    },\r\n    insertOrderedList: function() {\r\n      this.get('textEditor').insertOrderedList();\r\n      return this.get('textEditor').getEditor().focus();\r\n    },\r\n    insertUnorderedList: function() {\r\n      this.get('textEditor').insertUnorderedList();\r\n      return this.get('textEditor').getEditor().focus();\r\n    },\r\n    outdent: function() {\r\n      this.get('textEditor').outdent();\r\n      return this.get('textEditor').getEditor().focus();\r\n    },\r\n    indent: function() {\r\n      this.get('textEditor').indent();\r\n      return this.get('textEditor').getEditor().focus();\r\n    }\r\n  }\r\n});\r\n\r\nEmber.Widgets.TextEditorWithNonEditableConfigComponent = Ember.Widgets.TextEditorConfigComponent.extend(Ember.Widgets.PillInsertMixin, {\r\n  templateName: 'text-editor-with-non-editable-config'\r\n});\r\n\r\n\r\n})();//@ sourceURL=build/src/text_widget/text_editor_config.js")

eval("(function() {\r\n\r\nEmber.Widgets.TextEditorWithNonEditableComponent = Ember.Widgets.TextEditorComponent.extend(Ember.Widgets.PillInsertMixin, {\r\n  layoutName: 'text-editor-with-non-editable',\r\n  pillOptions: Ember.A([Ember.Widgets.TodaysDatePill, Ember.Widgets.NonEditableTextPill]),\r\n  getInsertSelectController: function() {\r\n    return this.get('pillChooserInLine');\r\n  },\r\n  INSERT_PILL_CHAR: '=',\r\n  insertPillRegex: Ember.computed(function() {\r\n    return new RegExp(this.INSERT_PILL_CHAR + '[A-Za-z0-9_\\+\\-]*$', 'gi');\r\n  }).property('INSERT_PILL_CHAR'),\r\n  pillId: 0,\r\n  mouseDownTarget: null,\r\n  pillHideSearchBox: false,\r\n  showConfigPopover: false,\r\n  selectedPillOption: null,\r\n  isTargetInEditor: function(event) {\r\n    return !Ember.isEmpty($(event.target).closest('.' + this.EDITOR_CLASS));\r\n  },\r\n  getEditor: function() {\r\n    return this.$('iframe.text-editor-frame').contents().find('.' + this.EDITOR_CLASS);\r\n  },\r\n  inEditor: function(range) {\r\n    return this.$(range.endContainer).parents().has(range.startContainer).first().closest('.' + this.EDITOR_CLASS).length > 0;\r\n  },\r\n  _getPillFromElement: function(pillElement) {\r\n    var data, key, params, value;\r\n    data = $(pillElement).data();\r\n    if (!data.type) {\r\n      return;\r\n    }\r\n    params = {};\r\n    for (key in data) {\r\n      value = data[key];\r\n      params[key] = value;\r\n    }\r\n    return Ember.get(data.type).create({\r\n      'textEditor': this,\r\n      'params': params\r\n    });\r\n  },\r\n  _getElementFromPill: function(pill) {\r\n    var pillId;\r\n    pillId = pill.get('params.pillId');\r\n    return this.getEditor().find('.non-editable[data-pill-id=\"' + pillId + '\"]');\r\n  },\r\n  serialize: function() {\r\n    var div, raw_html;\r\n    raw_html = this.getEditor().html();\r\n    div = $('<div/>').html(raw_html);\r\n    $('.non-editable', div).empty();\r\n    return div.html();\r\n  },\r\n  updateNonEditablePillContent: function() {\r\n    var pill, pillElement, pillElements, _i, _len;\r\n    pillElements = this.getEditor().find('.non-editable[data-pill-id]');\r\n    for (_i = 0, _len = pillElements.length; _i < _len; _i++) {\r\n      pillElement = pillElements[_i];\r\n      pill = this._getPillFromElement(pillElement);\r\n      if (!pill) {\r\n        return;\r\n      }\r\n      $(pillElement).text(pill.result());\r\n    }\r\n  },\r\n  getNewPillId: function() {\r\n    return this.incrementProperty('pillId');\r\n  },\r\n  updatePill: function(pill) {\r\n    var pillElement;\r\n    pillElement = this._getElementFromPill(pill);\r\n    return $(pillElement).text(pill.result());\r\n  },\r\n  insertPill: function(pill) {\r\n    var factor, iframeDocument, matches, precedingCharacters, range, selection;\r\n    iframeDocument = this.getDocument();\r\n    precedingCharacters = this.getCharactersPrecedingCaret(this.getEditor()[0]);\r\n    matches = precedingCharacters.match(this.get('insertPillRegex'));\r\n    if (matches) {\r\n      this.deleteCharactersPrecedingCaret(matches[0].length, false);\r\n    }\r\n    range = this.getCurrentRange();\r\n    if (!range || !this.inEditor(range)) {\r\n      selection = iframeDocument.getSelection();\r\n      selection.removeAllRanges();\r\n      range = iframeDocument.createRange();\r\n      range.selectNodeContents(iframeDocument.body.firstChild);\r\n      selection.addRange(range);\r\n    }\r\n    factor = this.insertElementAtRange(range, pill.render());\r\n    this.getEditor().focus();\r\n    selection = iframeDocument.getSelection();\r\n    selection.removeAllRanges();\r\n    range = iframeDocument.createRange();\r\n    range.setStartAfter(factor);\r\n    range.collapse();\r\n    return selection.addRange(range);\r\n  },\r\n  configurePill: function($pill) {\r\n    var pillClass, selectedPillOption;\r\n    pillClass = $pill.attr('data-type');\r\n    selectedPillOption = Ember.get(window, pillClass).create({\r\n      textEditor: this,\r\n      params: {\r\n        text: $pill.text(),\r\n        pillId: $pill.attr('data-pill-id')\r\n      }\r\n    });\r\n    return selectedPillOption.configure();\r\n  },\r\n  _showPillConfig: function(query) {\r\n    this.set('showConfigPopover', true);\r\n    this.set('pillHideSearchBox', true);\r\n    return this.set('query', query);\r\n  },\r\n  _hidePillConfig: function() {\r\n    this.set('showConfigPopover', false);\r\n    this.set('pillHideSearchBox', false);\r\n    return this.set('query', null);\r\n  },\r\n  _handlePillConfig: function() {\r\n    var matches, precedingCharacters, query;\r\n    precedingCharacters = this.getCharactersPrecedingCaret(this.getEditor()[0]);\r\n    matches = precedingCharacters.match(this.get('insertPillRegex'));\r\n    if (matches) {\r\n      query = matches[0].split(\" \").reverse()[0].slice(1);\r\n      return this._showPillConfig(query);\r\n    } else {\r\n      return this._hidePillConfig();\r\n    }\r\n  },\r\n  keyDown: function(event) {\r\n    var insertSelect, keyCode;\r\n    keyCode = event.keyCode;\r\n    if (this.showConfigPopover) {\r\n      insertSelect = this.getInsertSelectController();\r\n      if (keyCode === this.KEY_CODES.DOWN) {\r\n        return insertSelect.downArrowPressed(event);\r\n      } else if (keyCode === this.KEY_CODES.UP) {\r\n        return insertSelect.upArrowPressed(event);\r\n      } else if ((keyCode === this.KEY_CODES.ENTER || keyCode === this.KEY_CODES.TAB) && insertSelect.get('preparedContent').length > 0) {\r\n        return insertSelect.enterPressed(event);\r\n      } else if (keyCode === this.KEY_CODES.ESCAPE) {\r\n        return insertSelect.escapePressed(event);\r\n      }\r\n    }\r\n  },\r\n  keyUp: function(event) {\r\n    if (!this.isTargetInEditor(event)) {\r\n      return;\r\n    }\r\n    if (event.keyCode !== this.KEY_CODES.ESCAPE) {\r\n      this._handlePillConfig();\r\n      return this._super.apply(this, arguments);\r\n    }\r\n  },\r\n  click: function(event) {\r\n    var $target;\r\n    $target = $(event.target);\r\n    if ($target.attr('contentEditable') === \"false\" && $target.hasClass('configurable')) {\r\n      return this.configurePill($target);\r\n    }\r\n  }\r\n});\r\n\r\n\r\n})();//@ sourceURL=build/src/text_widget/text_editor_with_non_editable.js")

eval("(function() {\r\n\r\nvar colorNameToHexMap, colorToHex, rgbToHex;\r\n\r\nrgbToHex = function(r, g, b) {\r\n  return \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);\r\n};\r\n\r\ncolorNameToHexMap = {\r\n  aliceblue: \"#f0f8ff\",\r\n  antiquewhite: \"#faebd7\",\r\n  aqua: \"#00ffff\",\r\n  aquamarine: \"#7fffd4\",\r\n  azure: \"#f0ffff\",\r\n  beige: \"#f5f5dc\",\r\n  bisque: \"#ffe4c4\",\r\n  black: \"#000000\",\r\n  blanchedalmond: \"#ffebcd\",\r\n  blue: \"#0000ff\",\r\n  blueviolet: \"#8a2be2\",\r\n  brown: \"#a52a2a\",\r\n  burlywood: \"#deb887\",\r\n  cadetblue: \"#5f9ea0\",\r\n  chartreuse: \"#7fff00\",\r\n  chocolate: \"#d2691e\",\r\n  coral: \"#ff7f50\",\r\n  cornflowerblue: \"#6495ed\",\r\n  cornsilk: \"#fff8dc\",\r\n  crimson: \"#dc143c\",\r\n  cyan: \"#00ffff\",\r\n  darkblue: \"#00008b\",\r\n  darkcyan: \"#008b8b\",\r\n  darkgoldenrod: \"#b8860b\",\r\n  darkgray: \"#a9a9a9\",\r\n  darkgreen: \"#006400\",\r\n  darkkhaki: \"#bdb76b\",\r\n  darkmagenta: \"#8b008b\",\r\n  darkolivegreen: \"#556b2f\",\r\n  darkorange: \"#ff8c00\",\r\n  darkorchid: \"#9932cc\",\r\n  darkred: \"#8b0000\",\r\n  darksalmon: \"#e9967a\",\r\n  darkseagreen: \"#8fbc8f\",\r\n  darkslateblue: \"#483d8b\",\r\n  darkslategray: \"#2f4f4f\",\r\n  darkturquoise: \"#00ced1\",\r\n  darkviolet: \"#9400d3\",\r\n  deeppink: \"#ff1493\",\r\n  deepskyblue: \"#00bfff\",\r\n  dimgray: \"#696969\",\r\n  dodgerblue: \"#1e90ff\",\r\n  firebrick: \"#b22222\",\r\n  floralwhite: \"#fffaf0\",\r\n  forestgreen: \"#228b22\",\r\n  fuchsia: \"#ff00ff\",\r\n  gainsboro: \"#dcdcdc\",\r\n  ghostwhite: \"#f8f8ff\",\r\n  gold: \"#ffd700\",\r\n  goldenrod: \"#daa520\",\r\n  gray: \"#808080\",\r\n  green: \"#008000\",\r\n  greenyellow: \"#adff2f\",\r\n  honeydew: \"#f0fff0\",\r\n  hotpink: \"#ff69b4\",\r\n  \"indianred \": \"#cd5c5c\",\r\n  indigo: \"#4b0082\",\r\n  ivory: \"#fffff0\",\r\n  khaki: \"#f0e68c\",\r\n  lavender: \"#e6e6fa\",\r\n  lavenderblush: \"#fff0f5\",\r\n  lawngreen: \"#7cfc00\",\r\n  lemonchiffon: \"#fffacd\",\r\n  lightblue: \"#add8e6\",\r\n  lightcoral: \"#f08080\",\r\n  lightcyan: \"#e0ffff\",\r\n  lightgoldenrodyellow: \"#fafad2\",\r\n  lightgrey: \"#d3d3d3\",\r\n  lightgreen: \"#90ee90\",\r\n  lightpink: \"#ffb6c1\",\r\n  lightsalmon: \"#ffa07a\",\r\n  lightseagreen: \"#20b2aa\",\r\n  lightskyblue: \"#87cefa\",\r\n  lightslategray: \"#778899\",\r\n  lightsteelblue: \"#b0c4de\",\r\n  lightyellow: \"#ffffe0\",\r\n  lime: \"#00ff00\",\r\n  limegreen: \"#32cd32\",\r\n  linen: \"#faf0e6\",\r\n  magenta: \"#ff00ff\",\r\n  maroon: \"#800000\",\r\n  mediumaquamarine: \"#66cdaa\",\r\n  mediumblue: \"#0000cd\",\r\n  mediumorchid: \"#ba55d3\",\r\n  mediumpurple: \"#9370d8\",\r\n  mediumseagreen: \"#3cb371\",\r\n  mediumslateblue: \"#7b68ee\",\r\n  mediumspringgreen: \"#00fa9a\",\r\n  mediumturquoise: \"#48d1cc\",\r\n  mediumvioletred: \"#c71585\",\r\n  midnightblue: \"#191970\",\r\n  mintcream: \"#f5fffa\",\r\n  mistyrose: \"#ffe4e1\",\r\n  moccasin: \"#ffe4b5\",\r\n  navajowhite: \"#ffdead\",\r\n  navy: \"#000080\",\r\n  oldlace: \"#fdf5e6\",\r\n  olive: \"#808000\",\r\n  olivedrab: \"#6b8e23\",\r\n  orange: \"#ffa500\",\r\n  orangered: \"#ff4500\",\r\n  orchid: \"#da70d6\",\r\n  palegoldenrod: \"#eee8aa\",\r\n  palegreen: \"#98fb98\",\r\n  paleturquoise: \"#afeeee\",\r\n  palevioletred: \"#d87093\",\r\n  papayawhip: \"#ffefd5\",\r\n  peachpuff: \"#ffdab9\",\r\n  peru: \"#cd853f\",\r\n  pink: \"#ffc0cb\",\r\n  plum: \"#dda0dd\",\r\n  powderblue: \"#b0e0e6\",\r\n  purple: \"#800080\",\r\n  red: \"#ff0000\",\r\n  rosybrown: \"#bc8f8f\",\r\n  royalblue: \"#4169e1\",\r\n  saddlebrown: \"#8b4513\",\r\n  salmon: \"#fa8072\",\r\n  sandybrown: \"#f4a460\",\r\n  seagreen: \"#2e8b57\",\r\n  seashell: \"#fff5ee\",\r\n  sienna: \"#a0522d\",\r\n  silver: \"#c0c0c0\",\r\n  skyblue: \"#87ceeb\",\r\n  slateblue: \"#6a5acd\",\r\n  slategray: \"#708090\",\r\n  snow: \"#fffafa\",\r\n  springgreen: \"#00ff7f\",\r\n  steelblue: \"#4682b4\",\r\n  tan: \"#d2b48c\",\r\n  teal: \"#008080\",\r\n  thistle: \"#d8bfd8\",\r\n  tomato: \"#ff6347\",\r\n  turquoise: \"#40e0d0\",\r\n  violet: \"#ee82ee\",\r\n  wheat: \"#f5deb3\",\r\n  white: \"#ffffff\",\r\n  whitesmoke: \"#f5f5f5\",\r\n  yellow: \"#ffff00\",\r\n  yellowgreen: \"#9acd32\"\r\n};\r\n\r\ncolorToHex = function(color) {\r\n  var blue, digits, green, opacity, red;\r\n  if (!color) {\r\n    return color;\r\n  }\r\n  if (color.substr(0, 1) === \"#\" || color === \"transparent\") {\r\n    return color.toLowerCase();\r\n  }\r\n  if (color in colorNameToHexMap) {\r\n    return colorNameToHexMap[color.toLowerCase()];\r\n  }\r\n  digits = /(.*?)rgb(a)?\\((\\d+), (\\d+), (\\d+)(, (\\d+))?\\)/.exec(color);\r\n  if ((digits != null ? digits.length : void 0) === 8) {\r\n    red = parseInt(digits[3]);\r\n    green = parseInt(digits[4]);\r\n    blue = parseInt(digits[5]);\r\n    opacity = parseInt(digits[7]);\r\n    if (opacity === 0) {\r\n      return \"transparent\";\r\n    }\r\n    return rgbToHex(red, green, blue);\r\n  }\r\n  return void 0;\r\n};\r\n\r\nEmber.Widgets.ColorPicker = Ember.Component.extend({\r\n  layoutName: 'color-picker',\r\n  classNames: ['color-picker-button'],\r\n  colorPickerPlacement: 'right',\r\n  dropdownClass: null,\r\n  INITIAL_COLOR: '#0074D9',\r\n  selectedColor: '#0074D9',\r\n  selectedColorRGB: Ember.computed(function() {\r\n    return colorToHex(this.get('selectedColor'));\r\n  }).property('selectedColor'),\r\n  customColor: '',\r\n  isColorTransparent: Ember.computed.equal('selectedColorRGB', 'transparent'),\r\n  colorRows: Ember.A([Ember.A(['#000000', '#111111', '#434343', '#666666', '#999999', '#AAAAAA', '#B7B7B7', '#CCCCCC', '#D9D9D9', '#EFEFEF', '#F3F3F3', '#FFFFFF']), Ember.A(['#001F3F', '#0074D9', '#7FDBFF', '#39CCCC', '#2ECC40', '#01FF70', '#FFDC00', '#FF851B', '#FF4136', '#85144B', '#B10DC9', 'transparent'])]),\r\n  setCustomColor: Ember.observer(function() {\r\n    if (this.get('isCustomColorValid') === true) {\r\n      return this.set('selectedColor', this.get('customColor'));\r\n    }\r\n  }, 'customColor', 'isCustomColorValid'),\r\n  isCustomColorValid: Ember.computed(function() {\r\n    return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(\"\" + (this.get('customColor')));\r\n  }).property('customColor'),\r\n  customColorCSS: Ember.computed(function() {\r\n    return \"background-color: \" + (this.get('customColor'));\r\n  }).property('customColor'),\r\n  actions: {\r\n    setColor: function(color) {\r\n      this.set('customColor', '');\r\n      return this.set('selectedColor', color);\r\n    }\r\n  },\r\n  userDidSelect: function(selection) {\r\n    return this.sendAction('userSelected', selection);\r\n  }\r\n});\r\n\r\nEmber.Widgets.ColorPickerCell = Ember.View.extend(Ember.Widgets.StyleBindingsMixin, {\r\n  templateName: 'color-picker-cell',\r\n  classNames: ['pull-left', 'color-picker-cell'],\r\n  classNameBindings: Ember.A(['isActive:active:inactive']),\r\n  styleBindings: 'color:background-color',\r\n  color: null,\r\n  isActive: Ember.computed(function() {\r\n    return colorToHex(this.get('controller.selectedColor')) === colorToHex(this.get('color'));\r\n  }).property('controller.selectedColor', 'color'),\r\n  click: function(event) {\r\n    this.get('controller').send('setColor', this.get('color'));\r\n    return this.get('controller').userDidSelect(this.get('color'));\r\n  }\r\n});\r\n\r\n\r\n})();//@ sourceURL=build/src/color_picker.js")

eval("(function() {\r\n\r\nEmber.Widgets.TypeaheadComponent = Ember.Widgets.SelectComponent.extend({\r\n  layoutName: 'typeahead',\r\n  searchFieldClass: 'form-control',\r\n  searchView: Ember.TextField.extend({\r\n    \"class\": 'ember-select-input',\r\n    valueBinding: 'parentView.query',\r\n    focusIn: function(event) {\r\n      return this.set('parentView.showDropdown', true);\r\n    }\r\n  }),\r\n  userDidSelect: function(selection) {\r\n    this._super;\r\n    return this.set('query', this.get('selection'));\r\n  }\r\n});\r\n\r\nEmber.Handlebars.helper('typeahead-component', Ember.Widgets.TypeaheadComponent);\r\n\r\n\r\n})();//@ sourceURL=build/src/typeahead.js")